{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","Todolist.tsx","state/todolistsReducer.ts","state/tasksReducer.ts","components/ButtonAppBar.tsx","App.tsx","state/store.ts","index.tsx"],"names":["AddItemForm","React","memo","addItem","label","useState","title","setTitle","error","setError","addItemHandler","trim","TextField","variant","size","value","onChange","e","currentTarget","onKeyPress","key","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","task","removeTask","todolistId","changeTaskStatus","changeTaskTitle","console","log","onClickHandler","useCallback","id","onChangeHandler","newIsDoneValue","checked","onTitleChangeHandler","newValue","className","isDone","Checkbox","Delete","Todolist","props","addTask","removeTodolist","changeTodolistTitle","changeFilter","tasksForTodolist","tasks","filter","t","map","style","paddingTop","Button","initialState","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","mr","Menu","Typography","component","App","todolists","useSelector","state","dispatch","useDispatch","taskId","type","payload","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","rootReducer","combineReducers","action","stateCopy","newTasks","newTask","todolistTasks","find","copyState","todolist","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f24c8ed.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    label: string\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, label}: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"standard\"\r\n                   error={error}\r\n                   size=\"small\"\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label={error ? \"Title is required\" : label}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange}: EditableSpanPropsType) =>{\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? (<TextField\r\n                value={title}\r\n                onChange={changeTitle}\r\n                autoFocus onBlur={activateViewMode}\r\n            />)\r\n            : (<span\r\n                onDoubleClick={activateEditMode}>\r\n                {value}\r\n        </span>)\r\n    )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {TaskType} from \"../Todolist\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskID: string, newValue: string, todolistID: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({\r\n                                    task,\r\n                                    removeTask,\r\n                                    todolistId,\r\n                                    changeTaskStatus,\r\n                                    changeTaskTitle\r\n                                }: TaskPropsType) => {\r\n\r\n    console.log(\"Task\")\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todolistId)\r\n    },[task.id,removeTask,todolistId])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newIsDoneValue, todolistId);\r\n    },[task.id,changeTaskStatus,todolistId])\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId);\r\n    },[task.id,changeTaskTitle,todolistId])\r\n\r\n\r\n    return (\r\n        <div key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                checked={task.isDone}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './components/AddItemForm';\r\nimport {EditableSpan} from './components/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./components/Task\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id);\r\n    },[props.removeTodolist,props.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    const onClickHandler = useCallback((value: FilterValuesType) => {\r\n        props.changeFilter(value, props.id)\r\n    }, [props.changeFilter, props.id]);\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone);\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm label={'Name task'} addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return (\r\n                        <Task\r\n                            key={t.id}\r\n                            todolistId={props.id}\r\n                            task={t}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('all')}\r\n                    color={'success'}>\r\n                All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('active')}\r\n                    color={'primary'}>\r\n                Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('completed')}\r\n                    color={'secondary'}>\r\n                Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\ntype ActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.payload.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.payload.todolistId,\r\n                title: action.payload.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.payload.id);\r\n            if (todolist) {\r\n                todolist.title = action.payload.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.payload.id);\r\n            if (todolist) {\r\n                todolist.filter = action.payload.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        payload: {\r\n            id: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (title: string) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        payload: {\r\n            title: title,\r\n            todolistId: v1(),\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        payload: {\r\n            id: id,\r\n            title: title,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        payload: {\r\n            id: id,\r\n            filter: filter,\r\n        }\r\n    } as const\r\n}\r\n","import {TasksStateType} from '../App';\r\nimport {TaskType} from '../Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolistsReducer';\r\n\r\ntype ActionsType = RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.payload.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.payload.taskId);\r\n            stateCopy[action.payload.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.payload.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.payload.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.payload.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .map(t => (t.id === action.payload.taskId)\r\n                        ? {...t, isDone: action.payload.isDone}\r\n                        : t)\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.payload.todolistId];\r\n            let task = todolistTasks.find(t => t.id === action.payload.taskId);\r\n            if (task) {\r\n                task.title = action.payload.title;\r\n            }\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.payload.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            taskId: taskId,\r\n            todolistId: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (title: string, todolistId: string) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            title, todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        payload: {\r\n            isDone,\r\n            todolistId,\r\n            taskId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        payload: {\r\n            title,\r\n            todolistId,\r\n            taskId,\r\n        }\r\n    } as const\r\n}\r\n","import * as React from 'react';\r\nimport {AppBar, Box, Button, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\n\r\n\r\nexport const ButtonAppBar = () => {\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './components/AddItemForm';\r\nimport {Container, Grid, Paper} from '@material-ui/core';\r\nimport {addTodolistAC, changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC} from './state/todolistsReducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasksReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {ButtonAppBar} from \"./components/ButtonAppBar\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst App = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskAC(id, todolistId));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskAC(title, todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(id, newTitle, todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value));\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistAC(id));\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodolistTitleAC(id, title));\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistAC(title));\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm label={'Name todolist'} addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\nexport default App;\r\n","import {tasksReducer} from './tasksReducer';\r\nimport {todolistsReducer} from './todolistsReducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}