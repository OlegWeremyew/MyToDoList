{"version":3,"sources":["api/todolistApi.ts","components/ButtonAppBar/ButtonAppBar.tsx","App/AppReducer.ts","TodolistList/todolistsReducer.ts","utils/errorUtils.ts","TodolistList/tasksReducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","TodolistList/Todolist/Task/Task.tsx","TodolistList/Todolist/Todolist.tsx","TodolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","App/App.tsx","App/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","ButtonAppBar","status","useSelector","state","app","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","color","mr","Menu","Typography","variant","component","Button","LinearProgress","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","get","title","post","todolistId","put","delete","taskId","model","initialState","error","setAppErrorAC","type","payload","setAppStatusAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","err","message","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","startDate","priority","description","deadline","then","res","resultCode","updateTaskAC","catch","AddItemForm","React","memo","addItem","label","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","className","Checkbox","Delete","Todolist","demo","props","useDispatch","useEffect","todolist","items","setTasksAC","addTask","removeTodolist","changeTodolistTitle","changeFilter","tasksForTodolist","filter","entityStatus","map","style","paddingTop","TodolistList","todos","todoLists","todolists","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","ChangeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","Paper","Alert","ref","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","width","App","Container","fixed","rootReducer","combineReducers","action","f","todoListId","m","copyState","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2e0f780.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    headers: {\r\n        'API-KEY': 'f5a121b3-d5d2-4866-a73a-ab1418f0e4d8',\r\n    },\r\n})\r\n\r\nexport const todolistAPI = {\r\n\r\n    // todolist =============================\r\n    getTodos(): Promise<AxiosResponse<TodolistType[]>> {\r\n        return instance.get<TodolistType[]>(`todo-lists/`)\r\n    },\r\n\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists/`, {title})\r\n    },\r\n\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    // tasks =============================\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks/`)\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/`), {title})\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/${taskId}`), model)\r\n    },\r\n}\r\n\r\n// types ====================================\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n","import * as React from 'react';\r\nimport {AppBar, Box, Button, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {RequestStatusType} from \"../../App/AppReducer\";\r\n\r\n\r\nexport const ButtonAppBar = () => {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {\r\n                    status === \"loading\" &&\r\n                    <>\r\n                        <LinearProgress/>\r\n                        <LinearProgress variant=\"buffer\"/>\r\n                    </>}\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}","export const initialState = {\r\n    status: 'idle'as RequestStatusType,\r\n    error: null,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.payload.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.payload.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ActionCreators=============================\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        payload: {\r\n            error,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        payload: {\r\n            status,\r\n        },\r\n    } as const\r\n}\r\n\r\n//Types ========================================================\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null\r\n}\r\n\r\ntype ActionsType = setAppStatusActionType | setAppErrorActionType","import {todolistAPI, TodolistType} from \"../api/todolistApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC, setAppStatusActionType} from \"../App/AppReducer\";\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | setTodosActionType\r\n    | changeTodolistEntityStatusType\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state\r\n                .filter(tl => tl.id !== action.payload.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{...action.payload.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, title: action.payload.title}\r\n                    : m)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, filter: action.payload.filter}\r\n                    : m)\r\n        }\r\n        case \"CHANGE_TODOLIST_ENTITY_STATUS\": {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, entityStatus: action.payload.status}\r\n                    : m)\r\n        }\r\n        case \"SET-TODOS\": {\r\n            return action.payload.todos\r\n                .map(m => ({...m, filter: \"all\", entityStatus: \"idle\"}))\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        payload: {\r\n            id: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        payload: {\r\n            todolist,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        payload: {\r\n            id: id,\r\n            title: title,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        payload: {\r\n            id: id,\r\n            filter: filter,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setTodosActionType = ReturnType<typeof setTodosAC>\r\nexport const setTodosAC = (todos: Array<TodolistType>) => {\r\n    return {\r\n        type: \"SET-TODOS\",\r\n        payload: {\r\n            todos,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type changeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => {\r\n    return {\r\n        type: \"CHANGE_TODOLIST_ENTITY_STATUS\",\r\n        payload: {\r\n            id,\r\n            status,\r\n        },\r\n    } as const\r\n}\r\n\r\n// Thunk=============================================================\r\nexport const fetchTodolistsTC = () => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.getTodos()\r\n        .then(res => {\r\n            dispatch(setTodosAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n    todolistAPI.deleteTodo(todolistId)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.createTodo(title)\r\n        .then(res => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const ChangeTodolistTitleTC = (id: string, title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.updateTodoTitle(id, title)\r\n        .then(res => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport type ThunkDispatchType = Dispatch<ActionsType | setAppStatusActionType>","import {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from \"../App/AppReducer\";\r\nimport {ResponseType} from \"../api/todolistApi\";\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<setAppStatusActionType | setAppErrorActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error\"))\r\n    }\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\n\r\nexport const handleServerNetworkError = (err: { message: string }, dispatch: Dispatch<setAppStatusActionType | setAppErrorActionType>) => {\r\n    dispatch(setAppErrorAC(err.message ? err.message : \"Some error\"))\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, setTodosActionType} from './todolistsReducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../api/todolistApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../App/store\";\r\nimport {TasksStateType} from \"./TodolistList\";\r\nimport {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from \"../App/AppReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/errorUtils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .filter(f => f.id !== action.payload.taskId)\r\n            }\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]]\r\n            }\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .map(m => m.id === action.payload.taskId\r\n                        ? {...m, ...action.payload.model}\r\n                        : m)\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.payload.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODOS\": {\r\n            let stateCopy = {...state}\r\n            action.payload.todos\r\n                .forEach(f => stateCopy[f.id] = [])\r\n            return stateCopy\r\n        }\r\n        case 'SET-TASKS': {\r\n            return {...state, [action.payload.todolistId]: action.payload.tasks}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            taskId: taskId,\r\n            todolistId: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            task,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type updateTaskActionType = ReturnType<typeof updateTaskAC>\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => {\r\n    return {\r\n        type: 'UPDATE-TASK',\r\n        payload: {\r\n            model,\r\n            todolistId,\r\n            taskId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {\r\n        type: 'SET-TASKS',\r\n        payload: {\r\n            tasks,\r\n            todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\n//Thunk===================================================================================\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                let task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: ThunkDispatchType, getState: () => AppRootStateType) => {\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n                ...domainModel,\r\n            }\r\n            todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    handleServerNetworkError(err, dispatch)\r\n                })\r\n        }\r\n    }\r\n\r\n//types===============================================\r\nexport type ThunkDispatchType = Dispatch<ActionsType | setAppStatusActionType | setAppErrorActionType>\r\n\r\ntype ActionsType =\r\n    | RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | updateTaskActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | setTodosActionType\r\n    | SetTasksActionType\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    label: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, label, disabled = false}: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            disabled={disabled}\r\n            variant=\"standard\"\r\n            error={error}\r\n            size=\"small\"\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label={error ? \"Title is required\" : label}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange}: EditableSpanPropsType) =>{\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? (<TextField\r\n                value={title}\r\n                onChange={changeTitle}\r\n                autoFocus onBlur={activateViewMode}\r\n            />)\r\n            : (<span\r\n                onDoubleClick={activateEditMode}>\r\n                {value}\r\n        </span>)\r\n    )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolistApi\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskID: string, newValue: string, todolistID: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({\r\n                                    task,\r\n                                    removeTask,\r\n                                    todolistId,\r\n                                    changeTaskStatus,\r\n                                    changeTaskTitle\r\n                                }: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todolistId)\r\n    }, [task.id, todolistId, removeTask])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId);\r\n    }, [task.id, todolistId, changeTaskStatus])\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId);\r\n    }, [task.id, todolistId, changeTaskTitle])\r\n\r\n\r\n    return (\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                checked={task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../components/EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolistApi\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolistsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasksReducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id);\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.todolist.id);\r\n    }, [props.removeTodolist, props.todolist.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title);\r\n    }, [props.changeTodolistTitle, props.todolist.id])\r\n\r\n    const onClickHandler = useCallback((value: FilterValuesType) => {\r\n        props.changeFilter(value, props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id]);\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm\r\n            label={'Name task'}\r\n            addItem={addTask}\r\n            disabled={props.todolist.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return (\r\n                        <Task\r\n                            key={t.id}\r\n                            todolistId={props.todolist.id}\r\n                            task={t}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('all')}\r\n                    color={'success'}>\r\n                All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('active')}\r\n                    color={'primary'}>\r\n                Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('completed')}\r\n                    color={'secondary'}>\r\n                Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, ChangeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType, removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolistsReducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../App/store\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../api/todolistApi\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(id, todolistId));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title: newTitle}));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value));\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id));\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(ChangeTodolistTitleTC(id, title));\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm label={'Name todolist'} addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                                <Todolist\r\n                                    todolist={tl}\r\n                                    tasks={tasks[tl.id]}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>)\r\n}\r\n\r\n","import * as React from 'react';\r\nimport {AlertProps, Snackbar, Stack} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/core/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {setAppErrorAC} from \"../../App/AppReducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch= useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {Container} from '@material-ui/core';\r\n\r\nimport {ButtonAppBar} from \"../components/ButtonAppBar/ButtonAppBar\";\r\nimport {TodolistList} from \"../TodolistList/TodolistList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const App = ({demo = false}: PropsType) => {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <TodolistList demo={demo}/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {tasksReducer} from '../TodolistList/tasksReducer';\r\nimport {todolistsReducer} from '../TodolistList/todolistsReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./AppReducer\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App/App';\r\nimport {store} from './App/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}