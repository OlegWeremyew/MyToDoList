{"version":3,"sources":["api/todolistApi.ts","App/AppReducer.ts","utils/errorUtils.ts","features/Login/authReducer.ts","components/ButtonAppBar/ButtonAppBar.tsx","features/TodolistList/todolistsReducer.ts","features/TodolistList/tasksReducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistList/Todolist/Task/Task.tsx","features/TodolistList/Todolist/Todolist.tsx","features/TodolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","App/App.tsx","App/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","get","title","post","todolistId","put","delete","taskId","model","authAPI","data","initialState","status","error","isInitialized","setAppErrorAC","type","payload","setAppStatusAC","handleServerAppError","dispatch","messages","length","handleServerNetworkError","err","message","isLoggedIn","setIsLoggedInAC","value","ButtonAppBar","useSelector","state","app","auth","useDispatch","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","color","mr","Menu","Typography","variant","component","Button","onClick","then","res","resultCode","catch","LinearProgress","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","startDate","priority","description","deadline","updateTaskAC","AddItemForm","React","memo","addItem","label","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","key","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","className","Checkbox","Delete","Todolist","demo","props","useEffect","todolist","items","setTasksAC","addTask","removeTodolist","changeTodolistTitle","changeFilter","tasksForTodolist","filter","entityStatus","map","style","paddingTop","TodolistList","todoLists","todolists","todos","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","ChangeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","Paper","to","Alert","ref","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","Container","fixed","path","element","textAlign","top","CircularProgress","rootReducer","combineReducers","action","f","todoListId","m","copyState","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4033b0c.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    headers: {\r\n        'API-KEY': 'f5a121b3-d5d2-4866-a73a-ab1418f0e4d8',\r\n    },\r\n})\r\nexport const todolistAPI = {\r\n\r\n    // todolist =============================\r\n    getTodos(): Promise<AxiosResponse<TodolistType[]>> {\r\n        return instance.get<TodolistType[]>(`todo-lists/`)\r\n    },\r\n\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists/`, {title})\r\n    },\r\n\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    // tasks =============================\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks/`)\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/`), {title})\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/${taskId}`), model)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(\"/auth/login\", data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ data: ResponseMeType }>>(\"/auth/me\")\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(\"/auth/login\")\r\n    },\r\n}\r\n\r\n\r\n// types ====================================\r\n\r\ntype ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolistApi\";\r\nimport {setIsLoggedInAC} from \"../features/Login/authReducer\";\r\n\r\nexport const initialState = {\r\n    status: 'idle'as RequestStatusType,\r\n    error: null,\r\n    isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.payload.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.payload.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.payload.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ActionCreators=============================\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        payload: {\r\n            error,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        payload: {\r\n            status,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type setInitializedActionType = ReturnType<typeof setInitializedAC>\r\nexport const setInitializedAC = (isInitialized: boolean) => {\r\n    return {\r\n        type: 'APP/SET-INITIALIZED',\r\n        payload: {\r\n            isInitialized,\r\n        },\r\n    } as const\r\n}\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n            } else {\r\n\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(setInitializedAC(true))\r\n        })\r\n}\r\n\r\n//Types ========================================================\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null,\r\n    isInitialized: boolean,\r\n}\r\n\r\ntype ActionsType = setAppStatusActionType | setAppErrorActionType | setInitializedActionType","import {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from \"../App/AppReducer\";\r\nimport {ResponseType} from \"../api/todolistApi\";\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<setAppStatusActionType | setAppErrorActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error\"))\r\n    }\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\n\r\nexport const handleServerNetworkError = (err: { message: string }, dispatch: Dispatch<setAppStatusActionType | setAppErrorActionType>) => {\r\n    dispatch(setAppErrorAC(err.message ? err.message : \"Some error\"))\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}","import {Dispatch} from 'redux'\r\nimport {setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from \"../../App/AppReducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolistApi\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n}\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport type setIsLoggedInType = ReturnType<typeof setIsLoggedInAC>\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionsType = setIsLoggedInType\r\n    | setAppStatusActionType\r\n    | setAppErrorActionType","import * as React from 'react';\r\nimport {AppBar, Box, Button, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {RequestStatusType} from \"../../App/AppReducer\";\r\nimport {logoutTC} from \"../../features/Login/authReducer\";\r\n\r\n\r\nexport const ButtonAppBar = () => {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\r\n                </Toolbar>\r\n                {\r\n                    status === \"loading\" &&\r\n                    <>\r\n                        <LinearProgress/>\r\n                        <LinearProgress variant=\"buffer\"/>\r\n                    </>}\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}","import {todolistAPI, TodolistType} from \"../../api/todolistApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC, setAppStatusActionType} from \"../../App/AppReducer\";\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | setTodosActionType\r\n    | changeTodolistEntityStatusType\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state\r\n                .filter(tl => tl.id !== action.payload.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{...action.payload.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, title: action.payload.title}\r\n                    : m)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, filter: action.payload.filter}\r\n                    : m)\r\n        }\r\n        case \"CHANGE_TODOLIST_ENTITY_STATUS\": {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, entityStatus: action.payload.status}\r\n                    : m)\r\n        }\r\n        case \"SET-TODOS\": {\r\n            return action.payload.todos\r\n                .map(m => ({...m, filter: \"all\", entityStatus: \"idle\"}))\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        payload: {\r\n            id: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        payload: {\r\n            todolist,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        payload: {\r\n            id: id,\r\n            title: title,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        payload: {\r\n            id: id,\r\n            filter: filter,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setTodosActionType = ReturnType<typeof setTodosAC>\r\nexport const setTodosAC = (todos: Array<TodolistType>) => {\r\n    return {\r\n        type: \"SET-TODOS\",\r\n        payload: {\r\n            todos,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type changeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => {\r\n    return {\r\n        type: \"CHANGE_TODOLIST_ENTITY_STATUS\",\r\n        payload: {\r\n            id,\r\n            status,\r\n        },\r\n    } as const\r\n}\r\n\r\n// Thunk=============================================================\r\nexport const fetchTodolistsTC = () => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.getTodos()\r\n        .then(res => {\r\n            dispatch(setTodosAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n    todolistAPI.deleteTodo(todolistId)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.createTodo(title)\r\n        .then(res => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const ChangeTodolistTitleTC = (id: string, title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.updateTodoTitle(id, title)\r\n        .then(res => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport type ThunkDispatchType = Dispatch<ActionsType | setAppStatusActionType>","import {AddTodolistActionType, RemoveTodolistActionType, setTodosActionType} from './todolistsReducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../../api/todolistApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {TasksStateType} from \"./TodolistList\";\r\nimport {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from \"../../App/AppReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .filter(f => f.id !== action.payload.taskId)\r\n            }\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]]\r\n            }\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .map(m => m.id === action.payload.taskId\r\n                        ? {...m, ...action.payload.model}\r\n                        : m)\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.payload.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODOS\": {\r\n            let stateCopy = {...state}\r\n            action.payload.todos\r\n                .forEach(f => stateCopy[f.id] = [])\r\n            return stateCopy\r\n        }\r\n        case 'SET-TASKS': {\r\n            return {...state, [action.payload.todolistId]: action.payload.tasks}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            taskId: taskId,\r\n            todolistId: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            task,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type updateTaskActionType = ReturnType<typeof updateTaskAC>\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => {\r\n    return {\r\n        type: 'UPDATE-TASK',\r\n        payload: {\r\n            model,\r\n            todolistId,\r\n            taskId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {\r\n        type: 'SET-TASKS',\r\n        payload: {\r\n            tasks,\r\n            todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\n//Thunk===================================================================================\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                let task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: ThunkDispatchType, getState: () => AppRootStateType) => {\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n                ...domainModel,\r\n            }\r\n            todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    handleServerNetworkError(err, dispatch)\r\n                })\r\n        }\r\n    }\r\n\r\n//types===============================================\r\nexport type ThunkDispatchType = Dispatch<ActionsType | setAppStatusActionType | setAppErrorActionType>\r\n\r\ntype ActionsType =\r\n    | RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | updateTaskActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | setTodosActionType\r\n    | SetTasksActionType\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    label: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, label, disabled = false}: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            disabled={disabled}\r\n            variant=\"standard\"\r\n            error={error}\r\n            size=\"small\"\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label={error ? \"Title is required\" : label}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange}: EditableSpanPropsType) =>{\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? (<TextField\r\n                value={title}\r\n                onChange={changeTitle}\r\n                autoFocus onBlur={activateViewMode}\r\n            />)\r\n            : (<span\r\n                onDoubleClick={activateEditMode}>\r\n                {value}\r\n        </span>)\r\n    )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolistApi\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskID: string, newValue: string, todolistID: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({\r\n                                    task,\r\n                                    removeTask,\r\n                                    todolistId,\r\n                                    changeTaskStatus,\r\n                                    changeTaskTitle\r\n                                }: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todolistId)\r\n    }, [task.id, todolistId, removeTask])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId);\r\n    }, [task.id, todolistId, changeTaskStatus])\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId);\r\n    }, [task.id, todolistId, changeTaskTitle])\r\n\r\n\r\n    return (\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                checked={task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolistApi\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolistsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasksReducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id);\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.todolist.id);\r\n    }, [props.removeTodolist, props.todolist.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title);\r\n    }, [props.changeTodolistTitle, props.todolist.id])\r\n\r\n    const onClickHandler = useCallback((value: FilterValuesType) => {\r\n        props.changeFilter(value, props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id]);\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm\r\n            label={'Name task'}\r\n            addItem={addTask}\r\n            disabled={props.todolist.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return (\r\n                        <Task\r\n                            key={t.id}\r\n                            todolistId={props.todolist.id}\r\n                            task={t}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('all')}\r\n                    color={'success'}>\r\n                All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('active')}\r\n                    color={'primary'}>\r\n                Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('completed')}\r\n                    color={'secondary'}>\r\n                Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, ChangeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType, removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolistsReducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolistApi\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nexport const TodolistList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(id, todolistId));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title: newTitle}));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value));\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id));\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(ChangeTodolistTitleTC(id, title));\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm label={'Name todolist'} addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                                <Todolist\r\n                                    todolist={tl}\r\n                                    tasks={tasks[tl.id]}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>)\r\n}\r\n\r\n//Types\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\n","import * as React from 'react';\r\nimport {AlertProps, Snackbar, Stack} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/core/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {setAppErrorAC} from \"../../App/AppReducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch= useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {loginTC} from \"./authReducer\";\r\nimport {LoginParamsType} from \"../../api/todolistApi\";\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, \"captcha\">> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password is too short';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                            <TextField\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"password\")}\r\n\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={\r\n                                    <Checkbox\r\n                                        {...formik.getFieldProps(\"rememberMe\")}\r\n                                    />}\r\n                            />\r\n                            <Button\r\n                                type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}\r\n                            >Login</Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\n\r\nimport {CircularProgress, Container} from '@material-ui/core';\r\n\r\nimport {ButtonAppBar} from \"../components/ButtonAppBar/ButtonAppBar\";\r\nimport {TodolistList} from \"../features/TodolistList/TodolistList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC} from \"./AppReducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const App = ({demo = false}: PropsType) => {\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '40%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistList demo={demo}/>}/>\r\n                    <Route path=\"login\" element={<Login/>}/>\r\n\r\n                    <Route path=\"404\" element={<h1 style={{textAlign: \"center\"}}>404. Page not found</h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to={\"404\"}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {tasksReducer} from '../features/TodolistList/tasksReducer';\r\nimport {todolistsReducer} from '../features/TodolistList/todolistsReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./AppReducer\";\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App/App';\r\nimport {store} from './App/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}