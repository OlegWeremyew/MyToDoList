{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","className","id","label","variant","size","Button","color","onClick","style","maxWidth","maxHeight","minWidth","minHeight","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","IconButton","Delete","fontSize","removeTodolist","addTask","tasks","map","t","isDone","type","newIsDoneValue","checked","changeTaskStatus","newValue","changeTaskTitle","removeTask","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","tasksDispatch","todolistId","task","todolistTasks","todolist","find","tl","changeStatus","newTitle","Box","sx","flexGrow","AppBar","position","Toolbar","edge","mr","Menu","Typography","component","Container","fixed","Grid","container","padding","newTodolistId","spacing","allTodolistTasks","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.932882ef.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState(false)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false);\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            value={title}\r\n            error={error}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            className={error ? \"error\" : \"\"}\r\n            id=\"outlined-basic\"\r\n            label=\"title is requred\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n        />\r\n        <Button color='primary' variant=\"contained\" onClick={addItem}\r\n                style={{maxWidth: '40px', maxHeight: '40px', minWidth: '30px', minHeight: '30px'}}>+</Button>\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <input value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './components/AddItemForm';\r\nimport {EditableSpan} from './components/EditableSpan';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(props.id, \"all\");\r\n    const onActiveClickHandler = () => props.changeFilter(props.id, \"active\");\r\n    const onCompletedClickHandler = () => props.changeFilter(props.id, \"completed\");\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton aria-label=\"delete\">\r\n                <Delete fontSize=\"inherit\" onClick={removeTodolist}/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler}/>\r\n                        {/*<button onClick={onClickHandler}>x</button>*/}\r\n                        <IconButton aria-label=\"delete\">\r\n                            <Delete fontSize=\"inherit\" onClick={onClickHandler}/>\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ?\"contained\":'outlined'} color=\"secondary\" onClick={onAllClickHandler}>All</Button>\r\n            <Button variant={props.filter === 'active' ?\"contained\":'outlined'} color=\"primary\" onClick={onActiveClickHandler}>Active</Button>\r\n            <Button variant={props.filter === 'completed' ?\"contained\":'outlined'} color=\"error\" onClick={onCompletedClickHandler}>Completed</Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AppBar, Box, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {removeTaskAC, TasksReducer} from \"./state/TasksReducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, tasksDispatch] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //tasksDispatch(removeTaskAC(id, todolistId))\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        tasksDispatch({...tasks});\r\n    }\r\n\r\n    function changeFilter(todolistId: string, value: FilterValuesType) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n                //достанем нужный массив по todolistId:\r\n                let todolistTasks = tasks[todolistId];\r\n                // найдём нужную таску:\r\n                let task = todolistTasks.find(t => t.id === id);\r\n                //изменим таску, если она нашлась\r\n                if (task) {\r\n                    task.isDone = isDone;\r\n                    // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n                    tasksDispatch({...tasks});\r\n                }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n                //достанем нужный массив по todolistId:\r\n                let todolistTasks = tasks[todolistId];\r\n                // найдём нужную таску:\r\n                let task = todolistTasks.find(t => t.id === id);\r\n                //изменим таску, если она нашлась\r\n                if (task) {\r\n                    task.title = newTitle;\r\n                    // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n                    tasksDispatch({...tasks});\r\n                }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n                // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n                setTodolists(todolists.filter(tl => tl.id != id));\r\n                // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n                delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n                // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n                tasksDispatch({...tasks});\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        // найдём нужный todolist\r\n        const todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            // если нашёлся - изменим ему заголовок\r\n            todolist.title = title;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n                let newTodolistId = v1();\r\n                let newTodolist: TodolistType = {id: newTodolistId, title: title, filter: 'all'};\r\n                setTodolists([newTodolist, ...todolists]);\r\n                tasksDispatch({\r\n                    ...tasks,\r\n                    [newTodolistId]: []\r\n                })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <Box sx={{flexGrow: 1}}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            sx={{mr: 2}}\r\n                        >\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            News\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}