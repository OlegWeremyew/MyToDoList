{"version":3,"sources":["components/PageNotFound/PageNotFound.module.css","api/todolistApi.ts","App/AppReducer.ts","utils/RouterPATH.ts","utils/errorUtils.ts","features/Login/authReducer.ts","components/ButtonAppBar/ButtonAppBar.tsx","features/TodolistList/todolistsReducer.ts","features/TodolistList/tasksReducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistList/Todolist/Task/Task.tsx","features/TodolistList/Todolist/Todolist.tsx","utils/appSelectors.ts","features/TodolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/PageNotFound/PageNotFound.tsx","App/App.tsx","App/store.ts","index.tsx","features/TodolistList/Todolist/Task/Task.module.css","App/App.module.css","features/TodolistList/Todolist/TodolistList.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","get","title","post","todolistId","put","delete","taskId","model","authAPI","data","PATH","initialState","status","error","isInitialized","setAppErrorAC","type","payload","setAppStatusAC","handleServerAppError","dispatch","messages","length","handleServerNetworkError","err","message","isLoggedIn","setIsLoggedInAC","value","ButtonAppBar","useSelector","state","app","auth","useDispatch","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","color","mr","Typography","variant","component","Button","onClick","then","res","resultCode","catch","LinearProgress","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","startDate","priority","description","deadline","updateTaskAC","AddItemForm","React","memo","addItem","label","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","key","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","className","classes","containerTask","mainBlock","Checkbox","Delete","fontSize","Todolist","demo","addTaskCallBack","todolist","removeTodolistCallBack","changeTodolistTitleCallBack","changeFilterCallBack","props","useEffect","items","setTasksAC","addTask","removeTodolist","changeTodolistTitle","tasksForTodolist","filter","style","todolist__title","entityStatus","map","paddingTop","getIsInitializedSelector","getIsLoggedInSelector","getTaskSelector","getTodoLists","todolists","TodolistList","todoLists","todos","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","newTitle","changeFilter","removeTodolistAC","changeTodolistTitleAC","ChangeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","justifyContent","spacing","tl","Paper","to","LOGIN","Alert","ref","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","MAIN_WINDOW","FormControl","FormLabel","href","target","rel","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","PageNotFound","pageNotFound","App","finally","Container","fixed","path","element","PAGE_NOT_FOUND","ERROR","preloader","CircularProgress","rootReducer","combineReducers","action","f","todoListId","m","copyState","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,aAAe,qC,kECuFrBC,EAOAC,E,oKA7FNC,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,+CACTC,QAAS,CACL,UAAW,0CAGNC,EAAc,WAInB,OAAON,EAASO,IAAT,gBAJFD,EAAc,SAOZE,GACP,OAAOR,EAASS,KAAT,cAAmE,CAACD,WARtEF,EAAc,SAWPI,EAAoBF,GAChC,OAAOR,EAASW,IAAT,qBAAyCD,GAAc,CAACF,WAZ1DF,EAAc,SAeZI,GACP,OAAOV,EAASY,OAAT,qBAA4CF,KAhB9CJ,EAAc,SAoBdI,GACL,OAAOV,EAASO,IAAT,qBAA6CG,EAA7C,aArBFJ,EAAc,SAwBZI,EAAoBG,GAC3B,OAAOb,EAASY,OAAT,qBAA4CF,EAA5C,kBAAgEG,KAzBlEP,EAAc,SA4BZI,EAAoBF,GAC3B,OAAOR,EAASS,KAAT,qBAAiGC,EAAjG,WAAuH,CAACF,WA7B1HF,EAAc,SAgCZI,EAAoBG,EAAgBC,GAC3C,OAAOd,EAASW,IAAT,qBAAkGD,EAAlG,kBAAsHG,GAAWC,IAInIC,EAAU,SACbC,GACF,OAAOhB,EAASS,KAAuE,cAAeO,IAFjGD,EAAU,WAKf,OAAOf,EAASO,IAA4C,aALvDQ,EAAU,WAQf,OAAOf,EAASY,OAAqB,iB,SAkCjCd,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KC3FL,ICJKkB,EDICC,EAAe,CACxBC,OAAQ,OACRC,MAAO,KACPC,eAAe,GAkBNC,EAAgB,SAACF,GAC1B,MAAO,CACHG,KAAM,gBACNC,QAAS,CACLJ,WAMCK,EAAiB,SAACN,GAC3B,MAAO,CACHI,KAAM,iBACNC,QAAS,CACLL,YEnCCO,EAAuB,SAAIV,EAAuBW,GACvDX,EAAKY,SAASC,OACdF,EAASL,EAAcN,EAAKY,SAAS,KAErCD,EAASL,EAAc,eAE3BK,EAASF,EAAe,YAGfK,EAA2B,SAACC,EAA0BJ,GAC/DA,EAASL,EAAcS,EAAIC,QAAUD,EAAIC,QAAU,eACnDL,EAASF,EAAe,YCVtBP,EAAe,CACjBe,YAAY,GAcHC,EAAkB,SAACC,GAAD,MAC1B,CAACZ,KAAM,yBAA0BY,U,OCbzBC,EAAe,WAExB,IAAMjB,EAASkB,aAAiD,SAAAC,GAAK,OAAIA,EAAMC,IAAIpB,UAC7Ec,EAAaI,aAAuC,SAAAC,GAAK,OAAIA,EAAME,KAAKP,cACxEN,EAAWc,cAMjB,OACI,cAACC,EAAA,EAAD,CAAKC,GAAI,CAACC,SAAU,GAApB,SACI,eAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIC,KAAK,QACLC,KAAK,QACLC,MAAM,UACN,aAAW,OACXR,GAAI,CAACS,GAAI,KAGb,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAMZ,GAAI,CAACC,SAAU,GAAxD,sBAIIX,GACG,cAACuB,EAAA,EAAD,CAAQF,QAAQ,WAAWG,QArB5B,WAClB9B,GDyBsB,SAACA,GAC3BZ,IACK2C,MAAK,SAAAC,GAC0B,IAAxBA,EAAI3C,KAAK4C,YACTjC,EAASO,GAAgB,IACzBP,EAASF,EAAe,eAExBC,EAAqBiC,EAAI3C,KAAMW,MAGtCkC,OAAM,SAAC9B,GACJD,EAAyBC,EAAKJ,UChBoCwB,MAAM,UAAzD,uBAII,YAAXhC,GACG,mCACC,cAAC2C,EAAA,EAAD,Y,QCpBlB5C,EAA0C,G,eCb1CA,EAA+B,GAoIxB6C,EAAe,SAAClD,EAAgBH,EAAoBsD,GAArC,OACxB,SAACrC,EAA6BsC,GAE1B,IAEMC,EAFoBD,IAAWE,MACazD,GACb0D,MAAK,SAAAC,GACtC,OAAOA,EAAEC,KAAOzD,KAGpB,GAAIqD,EAAM,CACN,IAAMK,EAA6B,aAC/B/D,MAAO0D,EAAK1D,MACZgE,UAAWN,EAAKM,UAChBC,SAAUP,EAAKO,SACfC,YAAaR,EAAKQ,YAClBC,SAAUT,EAAKS,SACfxD,OAAQ+C,EAAK/C,QACV6C,GAEP1D,EAAuBI,EAAYG,EAAQ0D,GACtCb,MAAK,SAACC,GACyB,IAAxBA,EAAI3C,KAAK4C,WACTjC,EAjFI,SAACd,EAAgBC,EAAkCJ,GAC3E,MAAO,CACHa,KAAM,cACNC,QAAS,CACLV,QACAJ,aACAG,WA2EqB+D,CAAa/D,EAAQmD,EAAatD,IAE3CgB,EAAqBiC,EAAI3C,KAAMW,MAGtCkC,OAAM,SAAC9B,GACJD,EAAyBC,EAAKJ,S,0BC9JrCkD,GAAcC,IAAMC,MAAK,YAA+D,IAA7DC,EAA4D,EAA5DA,QAASC,EAAmD,EAAnDA,MAAmD,IAA5CC,gBAA4C,SAEhG,EAAwBC,mBAAS,IAAjC,mBAAK3E,EAAL,KAAY4E,EAAZ,KACA,EAAwBD,oBAAkB,GAA1C,mBAAK/D,EAAL,KAAYiE,EAAZ,KAEMC,EAAiB,WACE,KAAjB9E,EAAM+E,QACNP,EAAQxE,GACR4E,EAAS,KAETC,GAAS,IAejB,OAAO,gCACH,cAACG,EAAA,EAAD,CACIN,SAAUA,EACV5B,QAAQ,WACRlC,MAAOA,EACP6B,KAAK,QACLd,MAAO3B,EACPiF,SAlBgB,SAACC,GACrBN,EAASM,EAAEC,cAAcxD,QAkBrByD,WAfkB,SAACF,GACvBL,GAAS,GACK,UAAVK,EAAEG,KACFP,KAaAL,MAAO7D,EAAQ,oBAAsB6D,IAEzC,cAACjC,EAAA,EAAD,CAAYG,MAAM,UAAUM,QAAS6B,EAAgBJ,SAAUA,EAA/D,SACI,cAACY,EAAA,EAAD,Y,6BCvCCC,GAAejB,IAAMC,MAAK,YAA+C,IAA7C5C,EAA4C,EAA5CA,MAAOsD,EAAqC,EAArCA,SAE5C,EAA8BN,oBAAS,GAAvC,mBAAKa,EAAL,KAAeC,EAAf,KACA,EAAwBd,mBAAShD,GAAjC,mBAAK3B,EAAL,KAAY4E,EAAZ,KAcA,OACIY,EAEQ,cAACR,EAAA,EAAD,CACIlC,QAAQ,WACRnB,MAAO3B,EACPiF,SAVI,SAACC,GACjBN,EAASM,EAAEC,cAAcxD,QAUb+D,WAAS,EAACC,OAfD,WACrBF,GAAY,GACZR,EAASjF,MAgBD,sBAAM4F,cAtBO,WACrBH,GAAY,GACZb,EAASjD,IAoBD,SACKA,O,wCC5BRkE,GAAgCvB,IAAMC,MAAK,YAMQ,IALHb,EAKE,EALFA,KACAoC,EAIE,EAJFA,WACA5F,EAGE,EAHFA,WACA6F,EAEE,EAFFA,iBACAC,EACE,EADFA,gBAGnDC,EAAiBC,uBAAY,WAC/BJ,EAAWpC,EAAKI,GAAI5D,KACrB,CAACwD,EAAKI,GAAI5D,EAAY4F,IAEnBK,EAAkBD,uBAAY,SAAChB,GACjC,IAAIkB,EAAiBlB,EAAEC,cAAckB,QACrCN,EAAiBrC,EAAKI,GAAIsC,EAAiB9G,EAAagH,UAAYhH,EAAaiH,IAAKrG,KACvF,CAACwD,EAAKI,GAAI5D,EAAY6F,IAEnBS,EAAuBN,uBAAY,SAACO,GACtCT,EAAgBtC,EAAKI,GAAI2C,EAAUvG,KACpC,CAACwD,EAAKI,GAAI5D,EAAY8F,IAEzB,OACI,qBAAmBU,UAAWhD,EAAK/C,SAAWrB,EAAagH,UAAY,UAAY,GAAnF,SACI,sBAAKI,UAAWC,KAAQC,cAAxB,UACI,sBAAKF,UAAWC,KAAQE,UAAxB,UACI,cAACC,GAAA,EAAD,CACIT,QAAS3C,EAAK/C,SAAWrB,EAAagH,UACtC3D,MAAM,UACNsC,SAAUkB,IAEd,cAACZ,GAAD,CAAc5D,MAAO+B,EAAK1D,MAAOiF,SAAUuB,OAE/C,cAAChE,EAAA,EAAD,CAAYS,QAASgD,EAAgBxD,KAAK,QAA1C,SACI,cAACsE,GAAA,EAAD,CAAQC,SAAS,kBAXnBtD,EAAKI,O,yKCjBVmD,GAAgC3C,IAAMC,MAAK,YAWQ,IAAD,IAVF2C,YAUE,SATFnB,EASE,EATFA,iBACAoB,EAQE,EARFA,gBACAC,EAOE,EAPFA,SACAC,EAME,EANFA,uBACAC,EAKE,EALFA,4BACAtB,EAIE,EAJFA,gBACAF,EAGE,EAHFA,WACAyB,EAEE,EAFFA,qBACGC,EACD,mBAErDrG,EAAWc,cAEjBwF,qBAAU,WJ4Ec,IAACvH,EI3EjBgH,GAGJ/F,GJwEqBjB,EIxECkH,EAAStD,GJwEa,SAAC3C,GACjDA,EAASF,EAAe,YACxBnB,EAAqBI,GAChBgD,MAAK,SAACC,GACH,IAAMQ,EAAQR,EAAI3C,KAAKkH,MACvBvG,EAhBc,SAACwC,EAAwBzD,GAC/C,MAAO,CACHa,KAAM,YACNC,QAAS,CACL2C,QACAzD,eAWSyH,CAAWhE,EAAOzD,IAC3BiB,EAASF,EAAe,sBI7E7B,CAACiG,EAAM/F,EAAUiG,EAAStD,KAE7B,IAAM8D,EAAU1B,uBAAY,SAAClG,GACzBmH,EAAgBnH,EAAOoH,EAAStD,MACjC,CAACqD,EAAiBC,EAAStD,KAExB+D,EAAiB3B,uBAAY,WAC/BmB,EAAuBD,EAAStD,MACjC,CAACuD,EAAwBD,EAAStD,KAE/BgE,EAAsB5B,uBAAY,SAAClG,GACrCsH,EAA4BF,EAAStD,GAAI9D,KAC1C,CAACsH,EAA6BF,EAAStD,KAEpCmC,EAAiBC,uBAAY,SAACvE,GAChC4F,EAAqB5F,EAAOyF,EAAStD,MACtC,CAACyD,EAAsBH,EAAStD,KAE/BiE,EAAmBP,EAAM7D,MAU7B,MARwB,WAApByD,EAASY,SACTD,EAAmBA,EAAiBC,QAAO,SAAAtE,GAAI,OAAIA,EAAK/C,SAAWrB,EAAaiH,QAG5D,cAApBa,EAASY,SACTD,EAAmBA,EAAiBC,QAAO,SAAAtE,GAAI,OAAIA,EAAK/C,SAAWrB,EAAagH,cAIhF,gCACI,sBAAKI,UAAWuB,KAAMC,gBAAtB,UACI,cAAC3C,GAAD,CAAc5D,MAAOyF,EAASpH,MAAOiF,SAAU6C,IAC/C,cAACtF,EAAA,EAAD,CAAYS,QAAS4E,EAAgBnD,SAAoC,YAA1B0C,EAASe,aAAxD,SACI,cAACpB,GAAA,EAAD,SAGR,cAAC1C,GAAD,CACII,MAAO,YACPD,QAASoD,EACTlD,SAAoC,YAA1B0C,EAASe,eACvB,8BAEQJ,EAAiBK,KAAI,SAAA1E,GACjB,OACI,cAACmC,GAAD,CAEI3F,WAAYkH,EAAStD,GACrBJ,KAAMA,EACNoC,WAAYA,EACZC,iBAAkBA,EAClBC,gBAAiBA,GALZtC,EAAKI,SAW9B,sBAAKmE,MAAO,CAACI,WAAY,QAAzB,UACI,cAACrF,EAAA,EAAD,CACIF,QAA6B,QAApBsE,EAASY,OAAmB,WAAa,OAClD/E,QAAS,kBAAMgD,EAAe,QAC9BtD,MAAO,UAHX,iBAOA,cAACK,EAAA,EAAD,CAAQF,QAA6B,WAApBsE,EAASY,OAAsB,WAAa,OACrD/E,QAAS,kBAAMgD,EAAe,WAC9BtD,MAAO,UAFf,oBAMA,cAACK,EAAA,EAAD,CACIF,QAA6B,cAApBsE,EAASY,OAAyB,WAAa,OACxD/E,QAAS,kBAAMgD,EAAe,cAC9BtD,MAAO,YAHX,iC,STvGJlC,K,gBAAAA,E,cAAAA,E,qBAAAA,E,WAAAA,M,6BUEC6H,GAA2B,SAACxG,GACrC,OAAOA,EAAMC,IAAIlB,eAGR0H,GAAwB,SAACzG,GAClC,OAAOA,EAAME,KAAKP,YAGT+G,GAAkB,SAAC1G,GAC5B,OAAOA,EAAM6B,OAGJ8E,GAAe,SAAC3G,GACzB,OAAOA,EAAM4G,WCKJC,GAAoC,SAAC,GAAoB,IAAD,IAAlBzB,YAAkB,SAE3D/F,EAAWc,cAEX2G,EAAY/G,YAAyD4G,IACrE9E,EAAQ9B,YAA8C2G,IACtD/G,EAAaI,YAAuC0G,IAE1Dd,qBAAU,YACFP,GAASzF,GAGbN,GP2F8B,SAACA,GACnCA,EAASF,EAAe,YACxBnB,IACKoD,MAAK,SAAAC,GACFhC,EAxBD,CACHJ,KAAM,YACNC,QAAS,CACL6H,MAqBoB1F,EAAI3C,QACxBW,EAASF,EAAe,sBO/F7B,CAACiG,EAAMzF,EAAYN,IAEtB,IAAM2E,EAAaI,uBAAY,SAACpC,EAAY5D,GACxCiB,EN8EoB,SAACd,EAAgBH,GAAjB,OAAwC,SAACiB,GACjEA,EAASF,EAAe,YACxBnB,EAAuBI,EAAYG,GAC9B6C,MAAK,SAAAC,GACFhC,EA1DgB,SAACd,EAAgBH,GACzC,MAAO,CACHa,KAAM,cACNC,QAAS,CACLX,OAAQA,EACRH,WAAYA,IAqDH4I,CAAazI,EAAQH,IAC9BiB,EAASF,EAAe,kBMnFnB8H,CAAajF,EAAI5D,MAC3B,CAACiB,IAEEyG,EAAU1B,uBAAY,SAAClG,EAAeE,GACxCiB,ENmFiB,SAACjB,EAAoBF,GAArB,OAAuC,SAACmB,GAC7DA,EAASF,EAAe,YACxBnB,EAAuBI,EAAYF,GAC9BkD,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAI3C,KAAK4C,WAAkB,CAC3B,IAAIM,EAAOP,EAAI3C,KAAKA,KAAKwI,KACzB7H,EA1DS,SAACuC,GACtB,MAAO,CACH3C,KAAM,WACNC,QAAS,CACL0C,SAsDauF,CAAUvF,IACnBvC,EAASF,EAAe,mBAExBC,EAAqBiC,EAAI3C,KAAMW,MAGtCkC,OAAM,SAAC9B,GACJD,EAAyBC,EAAKJ,OMhGzB+H,CAAUhJ,EAAYF,MAChC,CAACmB,IAEEgI,EAAejD,uBAAY,SAACpC,EAAYnD,EAAsBT,GAChEiB,EAASoC,EAAaO,EAAI5D,EAAY,CAACS,cACxC,CAACQ,IAEE6E,EAAkBE,uBAAY,SAACpC,EAAYsF,EAAkBlJ,GAC/DiB,EAASoC,EAAaO,EAAI5D,EAAY,CAACF,MAAOoJ,OAC/C,CAACjI,IAEEkI,EAAenD,uBAAY,SAACvE,EAAyBzB,GACvDiB,EPwCG,CACHJ,KAAM,yBACNC,QAAS,CACL8C,GO3C4B5D,EP4C5B8H,OO5CwCrG,OAC7C,CAACR,IAEE0G,EAAiB3B,uBAAY,SAACpC,GP6ER,IAAC5D,EO5EzBiB,GP4EyBjB,EO5EC4D,EP4EsB,SAAC3C,GACrDA,EAASF,EAAe,YACxBE,EArBO,CACHJ,KAAM,gCACNC,QAAS,CACL8C,GAkB8B5D,EAjB9BS,OAiB0C,aAClDb,EAAuBI,GAClBgD,MAAK,SAAAC,GACFhC,EA7EoB,SAACjB,GAC7B,MAAO,CACHa,KAAM,kBACNC,QAAS,CACL8C,GAAI5D,IAyEKoJ,CAAiBpJ,IAC1BiB,EAASF,EAAe,sBOjF7B,CAACE,IAEE2G,EAAsB5B,uBAAY,SAACpC,EAAY9D,GACjDmB,EP2F6B,SAAC2C,EAAY9D,GAAb,OAA+B,SAACmB,GACjEA,EAASF,EAAe,YACxBnB,EAA4BgE,EAAI9D,GAC3BkD,MAAK,SAAAC,GACFhC,EA3EyB,SAAC2C,EAAY9D,GAC9C,MAAO,CACHe,KAAM,wBACNC,QAAS,CACL8C,GAAIA,EACJ9D,MAAOA,IAsEEuJ,CAAsBzF,EAAI9D,IACnCmB,EAASF,EAAe,kBOhGnBuI,CAAsB1F,EAAI9D,MACpC,CAACmB,IAEEsI,EAAcvD,uBAAY,SAAClG,GAC7BmB,EP8EqB,SAACnB,GAAD,OAAmB,SAACmB,GAC7CA,EAASF,EAAe,YACxBnB,EAAuBE,GAClBkD,MAAK,SAAAC,GACFhC,EA3ED,CACHJ,KAAM,eACNC,QAAS,CACLoG,SAwEuBjE,EAAI3C,KAAKA,KAAKwI,QACrC7H,EAASF,EAAe,kBOnFnByI,CAAc1J,MACxB,CAACmB,IAEJ,OAAKM,EAKD,qCACI,cAACkI,GAAA,EAAD,CAAMC,WAAS,EAAC3B,MAAO,CAAC4B,QAAS,QAASC,eAAgB,SAA1D,SACI,cAACzF,GAAD,CAAaI,MAAO,gBAAiBD,QAASiF,MAElD,cAACE,GAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,EAAGD,eAAgB,SAA5C,SAEQlB,EAAUR,KAAI,SAAA4B,GACV,OACI,cAACL,GAAA,EAAD,CAAMX,MAAI,EAAV,SACI,cAACiB,GAAA,EAAD,CAAOhC,MAAO,CAAC4B,QAAS,QAAxB,SACI,cAAC5C,GAAD,CACIG,SAAU4C,EACVrG,MAAOA,EAAMqG,EAAGlG,IAChBgC,WAAYA,EACZyB,qBAAsB8B,EACtBlC,gBAAiBS,EACjB7B,iBAAkBoD,EAClB9B,uBAAwBQ,EACxB7B,gBAAiBA,EACjBsB,4BAA6BQ,EAC7BZ,KAAMA,OAZF8C,EAAGlG,YAZhC,cAAC,IAAD,CAAUoG,GAAIzJ,EAAK0J,S,oBC7D5BC,GAAQ9F,cAA6C,SACvDkD,EACA6C,GAEA,OAAO,cAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAKvH,QAAQ,UAAa0E,OAG3D,SAAS+C,KAEZ,IAAM3J,EAAQiB,aAA6C,SAAAC,GAAK,OAAIA,EAAMC,IAAInB,SACxEO,EAAUc,cAEVuI,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJvJ,EAASL,EAAc,QAGrB6J,EAAmB,OAAV/J,EAEf,OACI,cAACgK,GAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,EAAzD,SACI,cAAC,GAAD,CAAOO,QAASP,EAAaQ,SAAS,QAAQ7I,GAAI,CAAC8I,MAAO,QAA1D,SACKrK,M,sDCXJsK,GAAkB,WAE3B,IAAMzJ,EAAaI,YAAuC0G,IACpDpH,EAAWc,cAEXkJ,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAAoD,GAW1D,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,oBAIdI,EAAOH,SAEDG,EAAOH,SAASlK,OAAS,IAChCsK,EAAOJ,SAAW,yBAFlBI,EAAOJ,SAAW,uBAIfI,GAEXE,SAAU,SAAAH,GXrBK,IAAClL,EWsBZW,GXtBYX,EWsBKkL,EXtBqB,SAACvK,GAC/CA,EAASF,EAAe,YACxBV,EAAcC,GACT0C,MAAK,SAAAC,GAC0B,IAAxBA,EAAI3C,KAAK4C,YACTjC,EAASO,GAAgB,IACzBP,EAASF,EAAe,eAExBC,EAAqBiC,EAAI3C,KAAMW,MAGtCkC,OAAM,SAAC9B,GACJD,EAAyBC,EAAKJ,SWW9BgK,EAAOW,eAIf,OAAIrK,EACO,cAAC,IAAD,CAAUyI,GAAIzJ,EAAKsL,cAI1B,cAACpC,GAAA,EAAD,CAAMC,WAAS,EAACE,eAAgB,SAAhC,SACI,cAACH,GAAA,EAAD,CAAMX,MAAI,EAACc,eAAgB,SAA3B,SACI,eAACkC,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,WACI,yDACI,mBACIC,KAAM,wCACNC,OAAQ,SACRC,IAAI,aAHR,qBAQJ,wEACA,0DACA,kDAEJ,sBAAMP,SAAUV,EAAOkB,aAAvB,SACI,eAACC,GAAA,EAAD,WACI,cAACtH,EAAA,EAAD,aACIP,MAAM,QACN8H,OAAO,UACHpB,EAAOqB,cAAc,WAE5BrB,EAAOsB,QAAQnB,OAASH,EAAOQ,OAAOL,OACvC,qBAAKrD,MAAO,CAACtF,MAAO,OAApB,SAA6BwI,EAAOQ,OAAOL,QAC3C,cAACtG,EAAA,EAAD,aACIP,MAAM,WACN1D,KAAK,WACLwL,OAAO,UACHpB,EAAOqB,cAAc,cAG5BrB,EAAOsB,QAAQlB,UAAYJ,EAAOQ,OAAOJ,UAC1C,qBAAKtD,MAAO,CAACtF,MAAO,OAApB,SAA6BwI,EAAOQ,OAAOJ,WAC3C,cAACmB,GAAA,EAAD,CACIjI,MAAO,cACPkI,QACI,cAAC7F,GAAA,EAAD,eACQqE,EAAOqB,cAAc,kBAGrC,cAACxJ,EAAA,EAAD,CACIjC,KAAM,SACN+B,QAAS,YACTH,MAAO,UAHX,gC,qBC/FfiK,GAAe,WACxB,OACI,oBAAIlG,UAAWuB,KAAM4E,aAArB,kCCYKC,GAA2B,SAAC,GAAoB,IAAD,IAAlB5F,YAAkB,SAElD/F,EAAWc,cACXpB,EAAgBgB,YAAuCyG,IAM7D,OAJAb,qBAAU,WACNtG,GhBgC6B,SAACA,GAClCZ,IACK2C,MAAK,SAAAC,GAC0B,IAAxBA,EAAI3C,KAAK4C,YACTjC,EAASO,GAAgB,OAKhCqL,SAAQ,WACL5L,EAnBD,CACHJ,KAAM,sBACNC,QAAS,CACLH,eAgB0B,agBzC/B,CAACM,EAAUN,IAETA,EASD,gCACI,cAAC0J,GAAD,IACA,cAAC,EAAD,IACA,cAACyC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAMzM,EAAKsL,YAAaoB,QAAS,cAAC,GAAD,CAAcjG,KAAMA,MAC5D,cAAC,IAAD,CAAOgG,KAAMzM,EAAK0J,MAAOgD,QAAS,cAAC,GAAD,MAElC,cAAC,IAAD,CAAOD,KAAMzM,EAAK2M,eAAgBD,QAAS,cAAC,GAAD,MAC3C,cAAC,IAAD,CAAOD,KAAMzM,EAAK4M,MAAOF,QAAS,cAAC,IAAD,CAAUjD,GAAIzJ,EAAK2M,2BAhB7D,qBAAK1G,UAAWuB,IAAMqF,UAAtB,SACI,cAACC,EAAA,EAAD,O,mBCpBVC,GAAcC,aAAgB,CAChC9J,MXAwB,WAAgF,IAA/E7B,EAA8E,uDAAtDpB,EAAcgN,EAAwC,uCACvG,OAAQA,EAAO3M,MACX,IAAK,cACD,OAAO,2BACAe,GADP,kBAEK4L,EAAO1M,QAAQd,WAAa4B,EAAM4L,EAAO1M,QAAQd,YAC7C8H,QAAO,SAAA2F,GAAC,OAAIA,EAAE7J,KAAO4J,EAAO1M,QAAQX,YAGjD,IAAK,WACD,OAAO,2BACAyB,GADP,kBAEK4L,EAAO1M,QAAQ0C,KAAKkK,WAFzB,CAEuCF,EAAO1M,QAAQ0C,MAFtD,mBAE+D5B,EAAM4L,EAAO1M,QAAQ0C,KAAKkK,gBAG7F,IAAK,cACD,OAAO,2BACA9L,GADP,kBAEK4L,EAAO1M,QAAQd,WAAa4B,EAAM4L,EAAO1M,QAAQd,YAC7CkI,KAAI,SAAAyF,GAAC,OAAIA,EAAE/J,KAAO4J,EAAO1M,QAAQX,OAAxB,2BACAwN,GAAMH,EAAO1M,QAAQV,OACzBuN,OAGlB,IAAK,eACD,OAAO,2BACA/L,GADP,kBAEK4L,EAAO1M,QAAQoG,SAAStD,GAAK,KAGtC,IAAK,kBACD,IAAMgK,EAAS,eAAOhM,GAEtB,cADOgM,EAAUJ,EAAO1M,QAAQ8C,IACzBgK,EAEX,IAAK,YACD,IAAIC,EAAS,eAAOjM,GAGpB,OAFA4L,EAAO1M,QAAQ6H,MACVmF,SAAQ,SAAAL,GAAC,OAAII,EAAUJ,EAAE7J,IAAM,MAC7BiK,EAEX,IAAK,YACD,OAAO,2BAAIjM,GAAX,kBAAmB4L,EAAO1M,QAAQd,WAAawN,EAAO1M,QAAQ2C,QAElE,QACI,OAAO7B,IW5Cf4G,UZY4B,WAAsG,IAArG5G,EAAoG,uDAAjEpB,EAAcgN,EAAmD,uCACjI,OAAQA,EAAO3M,MACX,IAAK,kBACD,OAAOe,EACFkG,QAAO,SAAAgC,GAAE,OAAIA,EAAGlG,KAAO4J,EAAO1M,QAAQ8C,MAE/C,IAAK,eACD,MAAM,CAAN,2BAAY4J,EAAO1M,QAAQoG,UAA3B,IAAqCY,OAAQ,MAAOG,aAAc,UAAlE,mBAA8ErG,IAElF,IAAK,wBACD,OAAOA,EACFsG,KAAI,SAAAyF,GAAC,OAAIA,EAAE/J,KAAO4J,EAAO1M,QAAQ8C,GAAxB,2BACA+J,GADA,IACG7N,MAAO0N,EAAO1M,QAAQhB,QAC7B6N,KAEd,IAAK,yBACD,OAAO/L,EACFsG,KAAI,SAAAyF,GAAC,OAAIA,EAAE/J,KAAO4J,EAAO1M,QAAQ8C,GAAxB,2BACA+J,GADA,IACG7F,OAAQ0F,EAAO1M,QAAQgH,SAC9B6F,KAEd,IAAK,gCACD,OAAO/L,EACFsG,KAAI,SAAAyF,GAAC,OAAIA,EAAE/J,KAAO4J,EAAO1M,QAAQ8C,GAAxB,2BACA+J,GADA,IACG1F,aAAcuF,EAAO1M,QAAQL,SACpCkN,KAEd,IAAK,YACD,OAAOH,EAAO1M,QAAQ6H,MACjBT,KAAI,SAAAyF,GAAC,kCAASA,GAAT,IAAY7F,OAAQ,MAAOG,aAAc,YAEvD,QACI,OAAOrG,IY3CfC,IjBFsB,WAAoF,IAAnFD,EAAkF,uDAAxDpB,EAAcgN,EAA0C,uCACzG,OAAQA,EAAO3M,MACX,IAAK,iBACD,OAAO,2BAAIe,GAAX,IAAkBnB,OAAQ+M,EAAO1M,QAAQL,SAC7C,IAAK,gBACD,OAAO,2BAAImB,GAAX,IAAkBlB,MAAO8M,EAAO1M,QAAQJ,QAC5C,IAAK,sBACD,OAAO,2BAAIkB,GAAX,IAAkBjB,cAAe6M,EAAO1M,QAAQH,gBACpD,QACI,OAAOiB,IiBNfE,KdJuB,WAAoF,IAAnFF,EAAkF,uDAAxDpB,EAAcgN,EAA0C,uCAC1G,MACS,2BADDA,EAAO3M,KAEA,2BAAIe,GAAX,IAAkBL,WAAYiM,EAAO/L,QAE9BG,KcENmM,GAAQC,aAAYV,GAAaW,aAAgBC,OAG9DC,OAAOJ,MAAQA,G,aCXfK,IAASC,OACL,cAAC,KAAD,UACI,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACI,cAAC,GAAD,QAEOO,SAASC,eAAe,U,mBCZ3CrP,EAAOC,QAAU,CAAC,cAAgB,8B,mBCAlCD,EAAOC,QAAU,CAAC,UAAY,yB,mBCA9BD,EAAOC,QAAU,CAAC,gBAAkB,yC","file":"static/js/main.d7419c65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"PageNotFound_pageNotFound__78dtJ\"};","import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    headers: {\r\n        'API-KEY': 'f5a121b3-d5d2-4866-a73a-ab1418f0e4d8',\r\n    },\r\n})\r\nexport const todolistAPI = {\r\n\r\n    // todolist =============================\r\n    getTodos(): Promise<AxiosResponse<TodolistType[]>> {\r\n        return instance.get<TodolistType[]>(`todo-lists/`)\r\n    },\r\n\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists/`, {title})\r\n    },\r\n\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    // tasks =============================\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks/`)\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/`), {title})\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/${taskId}`), model)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(\"/auth/login\", data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ data: ResponseMeType }>>(\"/auth/me\")\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(\"/auth/login\")\r\n    },\r\n}\r\n\r\n\r\n// types ====================================\r\n\r\ntype ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolistApi\";\r\nimport {setIsLoggedInAC} from \"../features/Login/authReducer\";\r\n\r\nexport const initialState = {\r\n    status: 'idle'as RequestStatusType,\r\n    error: null,\r\n    isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.payload.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.payload.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.payload.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ActionCreators=============================\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        payload: {\r\n            error,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        payload: {\r\n            status,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type setInitializedActionType = ReturnType<typeof setInitializedAC>\r\nexport const setInitializedAC = (isInitialized: boolean) => {\r\n    return {\r\n        type: 'APP/SET-INITIALIZED',\r\n        payload: {\r\n            isInitialized,\r\n        },\r\n    } as const\r\n}\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n            } else {\r\n\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(setInitializedAC(true))\r\n        })\r\n}\r\n\r\n//Types ========================================================\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null,\r\n    isInitialized: boolean,\r\n}\r\n\r\ntype ActionsType = setAppStatusActionType | setAppErrorActionType | setInitializedActionType","export enum PATH {\r\n    MAIN_WINDOW = '/',\r\n    LOGIN =\"login\",\r\n    PAGE_NOT_FOUND = '404',\r\n    ERROR = '*',\r\n}","import {setAppErrorAC, setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from \"../App/AppReducer\";\r\nimport {ResponseType} from \"../api/todolistApi\";\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<setAppStatusActionType | setAppErrorActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error\"))\r\n    }\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\n\r\nexport const handleServerNetworkError = (err: { message: string }, dispatch: Dispatch<setAppStatusActionType | setAppErrorActionType>) => {\r\n    dispatch(setAppErrorAC(err.message ? err.message : \"Some error\"))\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}","import {Dispatch} from 'redux'\r\nimport {setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from \"../../App/AppReducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolistApi\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport type setIsLoggedInType = ReturnType<typeof setIsLoggedInAC>\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionsType = setIsLoggedInType\r\n    | setAppStatusActionType\r\n    | setAppErrorActionType","import * as React from 'react';\r\nimport {AppBar, Box, Button, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {RequestStatusType} from \"../../App/AppReducer\";\r\nimport {logoutTC} from \"../../features/Login/authReducer\";\r\n\r\n\r\nexport const ButtonAppBar = () => {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        Todolist\r\n                    </Typography>\r\n                    {\r\n                        isLoggedIn\r\n                        && <Button variant=\"outlined\" onClick={logoutHandler} color=\"inherit\">Logout</Button>\r\n                    }\r\n                </Toolbar>\r\n                {\r\n                    status === \"loading\"\r\n                    && <>\r\n                        <LinearProgress/>\r\n                    </>\r\n                }\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}","import {todolistAPI, TodolistType} from \"../../api/todolistApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC, setAppStatusActionType} from \"../../App/AppReducer\";\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | setTodosActionType\r\n    | changeTodolistEntityStatusType\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state\r\n                .filter(tl => tl.id !== action.payload.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{...action.payload.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, title: action.payload.title}\r\n                    : m)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, filter: action.payload.filter}\r\n                    : m)\r\n        }\r\n        case \"CHANGE_TODOLIST_ENTITY_STATUS\": {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, entityStatus: action.payload.status}\r\n                    : m)\r\n        }\r\n        case \"SET-TODOS\": {\r\n            return action.payload.todos\r\n                .map(m => ({...m, filter: \"all\", entityStatus: \"idle\"}))\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        payload: {\r\n            id: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        payload: {\r\n            todolist,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        payload: {\r\n            id: id,\r\n            title: title,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        payload: {\r\n            id: id,\r\n            filter: filter,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setTodosActionType = ReturnType<typeof setTodosAC>\r\nexport const setTodosAC = (todos: Array<TodolistType>) => {\r\n    return {\r\n        type: \"SET-TODOS\",\r\n        payload: {\r\n            todos,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type changeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => {\r\n    return {\r\n        type: \"CHANGE_TODOLIST_ENTITY_STATUS\",\r\n        payload: {\r\n            id,\r\n            status,\r\n        },\r\n    } as const\r\n}\r\n\r\n// Thunk=============================================================\r\nexport const fetchTodolistsTC = () => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.getTodos()\r\n        .then(res => {\r\n            dispatch(setTodosAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n    todolistAPI.deleteTodo(todolistId)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.createTodo(title)\r\n        .then(res => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const ChangeTodolistTitleTC = (id: string, title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.updateTodoTitle(id, title)\r\n        .then(res => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport type ThunkDispatchType = Dispatch<ActionsType | setAppStatusActionType>","import {AddTodolistActionType, RemoveTodolistActionType, setTodosActionType} from './todolistsReducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../../api/todolistApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {TasksStateType} from \"./TodolistList\";\r\nimport {setAppErrorActionType, setAppStatusAC, setAppStatusActionType} from \"../../App/AppReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .filter(f => f.id !== action.payload.taskId)\r\n            }\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]]\r\n            }\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .map(m => m.id === action.payload.taskId\r\n                        ? {...m, ...action.payload.model}\r\n                        : m)\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.payload.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODOS\": {\r\n            let stateCopy = {...state}\r\n            action.payload.todos\r\n                .forEach(f => stateCopy[f.id] = [])\r\n            return stateCopy\r\n        }\r\n        case 'SET-TASKS': {\r\n            return {...state, [action.payload.todolistId]: action.payload.tasks}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            taskId: taskId,\r\n            todolistId: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            task,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type updateTaskActionType = ReturnType<typeof updateTaskAC>\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => {\r\n    return {\r\n        type: 'UPDATE-TASK',\r\n        payload: {\r\n            model,\r\n            todolistId,\r\n            taskId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {\r\n        type: 'SET-TASKS',\r\n        payload: {\r\n            tasks,\r\n            todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\n//Thunk===================================================================================\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                let task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: ThunkDispatchType, getState: () => AppRootStateType) => {\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n                ...domainModel,\r\n            }\r\n            todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    handleServerNetworkError(err, dispatch)\r\n                })\r\n        }\r\n    }\r\n\r\n//types===============================================\r\nexport type ThunkDispatchType = Dispatch<ActionsType | setAppStatusActionType | setAppErrorActionType>\r\n\r\ntype ActionsType =\r\n    | RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | updateTaskActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | setTodosActionType\r\n    | SetTasksActionType\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    label: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, label, disabled = false}: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            disabled={disabled}\r\n            variant=\"standard\"\r\n            error={error}\r\n            size=\"small\"\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label={error ? \"Title is required\" : label}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange}: EditableSpanPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(value)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? (\r\n                <TextField\r\n                    variant=\"standard\"\r\n                    value={title}\r\n                    onChange={changeTitle}\r\n                    autoFocus onBlur={activateViewMode}\r\n                />\r\n            ) : (\r\n                <span onDoubleClick={activateEditMode}>\r\n                    {value}\r\n                </span>\r\n            )\r\n    )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport classes from './Task.module.css'\r\n\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolistApi\";\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({\r\n                                                             task,\r\n                                                             removeTask,\r\n                                                             todolistId,\r\n                                                             changeTaskStatus,\r\n                                                             changeTaskTitle\r\n                                                         }) => {\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todolistId)\r\n    }, [task.id, todolistId, removeTask])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId);\r\n    }, [task.id, todolistId, changeTaskStatus])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId);\r\n    }, [task.id, todolistId, changeTaskTitle])\r\n\r\n    return (\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <div className={classes.containerTask}>\r\n                <div className={classes.mainBlock}>\r\n                    <Checkbox\r\n                        checked={task.status === TaskStatuses.Completed}\r\n                        color=\"primary\"\r\n                        onChange={onChangeHandler}\r\n                    />\r\n                    <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n                </div>\r\n                <IconButton onClick={onClickHandler} size=\"small\">\r\n                    <Delete fontSize=\"inherit\"/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n//type\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskID: string, newValue: string, todolistID: string) => void\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport style from './TodolistList.module.css'\r\n\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolistApi\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolistsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasksReducer\";\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo(({\r\n                                                             demo = false,\r\n                                                             changeTaskStatus,\r\n                                                             addTaskCallBack,\r\n                                                             todolist,\r\n                                                             removeTodolistCallBack,\r\n                                                             changeTodolistTitleCallBack,\r\n                                                             changeTaskTitle,\r\n                                                             removeTask,\r\n                                                             changeFilterCallBack,\r\n                                                             ...props\r\n                                                         }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [demo, dispatch, todolist.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        addTaskCallBack(title, todolist.id)\r\n    }, [addTaskCallBack, todolist.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        removeTodolistCallBack(todolist.id)\r\n    }, [removeTodolistCallBack, todolist.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleCallBack(todolist.id, title)\r\n    }, [changeTodolistTitleCallBack, todolist.id])\r\n\r\n    const onClickHandler = useCallback((value: FilterValuesType) => {\r\n        changeFilterCallBack(value, todolist.id)\r\n    }, [changeFilterCallBack, todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (todolist.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(task => task.status === TaskStatuses.New);\r\n    }\r\n\r\n    if (todolist.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(task => task.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.todolist__title}>\r\n                <EditableSpan value={todolist.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist} disabled={todolist.entityStatus === \"loading\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n            <AddItemForm\r\n                label={'Name task'}\r\n                addItem={addTask}\r\n                disabled={todolist.entityStatus === \"loading\"}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(task => {\r\n                        return (\r\n                            <Task\r\n                                key={task.id}\r\n                                todolistId={todolist.id}\r\n                                task={task}\r\n                                removeTask={removeTask}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <div style={{paddingTop: \"10px\"}}>\r\n                <Button\r\n                    variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('all')}\r\n                    color={'success'}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={() => onClickHandler('active')}\r\n                        color={'primary'}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('completed')}\r\n                    color={'secondary'}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n//type\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilterCallBack: (value: FilterValuesType, todolistId: string) => void\r\n    addTaskCallBack: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolistCallBack: (id: string) => void\r\n    changeTodolistTitleCallBack: (id: string, newTitle: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n","import {AppRootStateType} from \"../App/store\";\r\n\r\nexport const getIsInitializedSelector = (state: AppRootStateType) => {\r\n    return state.app.isInitialized\r\n}\r\n\r\nexport const getIsLoggedInSelector = (state: AppRootStateType) => {\r\n    return state.auth.isLoggedIn\r\n}\r\n\r\nexport const getTaskSelector = (state: AppRootStateType) => {\r\n    return state.tasks\r\n}\r\n\r\nexport const getTodoLists = (state: AppRootStateType) => {\r\n    return state.todolists\r\n}","import {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, ChangeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType, removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolistsReducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolistApi\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {PATH} from \"../../utils/RouterPATH\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {getIsLoggedInSelector, getTaskSelector, getTodoLists} from \"../../utils/appSelectors\";\r\n\r\nexport const TodolistList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(getTodoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(getTaskSelector)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(getIsLoggedInSelector)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [demo, isLoggedIn, dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(id, todolistId));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title: newTitle}));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value));\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id));\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(ChangeTodolistTitleTC(id, title));\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}} justifyContent={'center'}>\r\n                <AddItemForm label={'Name todolist'} addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3} justifyContent={'center'}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        todolist={tl}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilterCallBack={changeFilter}\r\n                                        addTaskCallBack={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        removeTodolistCallBack={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitleCallBack={changeTodolistTitle}\r\n                                        demo={demo}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>)\r\n}\r\n\r\n//Types\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\n","import * as React from 'react';\r\nimport {AlertProps, Snackbar} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/core/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {setAppErrorAC} from \"../../App/AppReducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch= useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {LoginParamsType} from \"../../api/todolistApi\";\r\nimport {PATH} from \"../../utils/RouterPATH\";\r\nimport {getIsLoggedInSelector} from \"../../utils/appSelectors\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(getIsLoggedInSelector)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, \"captcha\">> = {}\r\n            if (!values.email) {\r\n                errors.email = 'Email is required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password is too short'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={PATH.MAIN_WINDOW}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a\r\n                                href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}\r\n                                rel=\"noreferrer\"\r\n                            >\r\n                                here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                            <TextField\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"password\")}\r\n\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={\r\n                                    <Checkbox\r\n                                        {...formik.getFieldProps(\"rememberMe\")}\r\n                                    />}\r\n                            />\r\n                            <Button\r\n                                type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport style from './PageNotFound.module.css'\r\n\r\nexport const PageNotFound = () => {\r\n    return (\r\n        <h1 className={style.pageNotFound}>404. Page not found</h1>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport style from './App.module.css';\r\n\r\nimport {CircularProgress, Container} from '@material-ui/core';\r\n\r\nimport {ButtonAppBar} from \"../components/ButtonAppBar/ButtonAppBar\";\r\nimport {TodolistList} from \"../features/TodolistList/TodolistList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC} from \"./AppReducer\";\r\nimport {PATH} from \"../utils/RouterPATH\";\r\nimport {PageNotFound} from \"../components/PageNotFound/PageNotFound\";\r\nimport {getIsInitializedSelector} from \"../utils/appSelectors\";\r\n\r\nexport const App: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(getIsInitializedSelector)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch, isInitialized])\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div className={style.preloader}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={PATH.MAIN_WINDOW} element={<TodolistList demo={demo}/>}/>\r\n                    <Route path={PATH.LOGIN} element={<Login/>}/>\r\n\r\n                    <Route path={PATH.PAGE_NOT_FOUND} element={<PageNotFound/>}/>\r\n                    <Route path={PATH.ERROR} element={<Navigate to={PATH.PAGE_NOT_FOUND}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n//type\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\n","import {tasksReducer} from '../features/TodolistList/tasksReducer';\r\nimport {todolistsReducer} from '../features/TodolistList/todolistsReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./AppReducer\";\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App/App';\r\nimport {store} from './App/store';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerTask\":\"Task_containerTask__3GgPa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"App_preloader__1XTFU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist__title\":\"TodolistList_todolist__title__1P_46\"};"],"sourceRoot":""}