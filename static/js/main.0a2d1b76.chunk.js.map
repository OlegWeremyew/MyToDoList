{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","components/ButtonAppBar.tsx","reducers/TasksReducer.ts","reducers/TodolistsReducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","addTask","label","useState","title","setTitle","error","setError","addTaskHandler","trim","TextField","variant","value","size","onChange","e","currentTarget","onKeyPress","key","Button","style","marginLeft","maxWidth","maxHeight","minWidth","minHeight","onClick","disabled","EditableSpan","rename","edit","setEdit","newTitle","setNewTitle","activeViewMode","whiteSpace","onDoubleClick","id","onBlur","autoFocus","sx","width","Todolist","tasks","removeTask","changeFilter","changeTaskStatus","filter","todolistId","removeTodolist","renameTask","renameTodoList","display","justifyContent","IconButton","Delete","map","t","height","className","isDone","Grid","container","alignItems","spacing","item","Checkbox","inputProps","checked","margin","ButtonAppBar","Box","flexGrow","AppBar","position","Toolbar","edge","color","mr","Menu","Typography","component","TasksReducer","state","action","type","newTask","v1","payload","taskId","newState","TodoListsReducer","tl","App","todolistID1","todolistID2","useReducer","todoLists","todolistDispatch","tasksDispatch","removeTaskAC","addTaskAC","changeStatus","changeStatusAC","console","log","renameTaskAC","changeFilterAC","removeTodolistAC","removeTasksAC","renameTodoListAC","Container","fixed","padding","newId","addTodoListAC","m","tasksForTodolist","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0a2d1b76.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addTask: (title: string) => void\r\n    label: string\r\n\r\n}\r\nexport const AddItemForm = ({addTask, label}: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addTaskHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addTask(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === 'Enter') {\r\n            addTaskHandler();\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                       label={error ? \"Title is required\" : label}\r\n                       error={error}\r\n                       variant=\"outlined\"\r\n                       value={title}\r\n                       size=\"small\"\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n            />\r\n            <Button style={{\r\n                marginLeft: '10px', maxWidth: '40px',\r\n                maxHeight: '40px', minWidth: '40px', minHeight: '40px'\r\n            }}\r\n                    variant=\"contained\" onClick={addTaskHandler} disabled={error}>+</Button>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    rename: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = ({title, rename}: EditableSpanPropsType) => {\r\n    const [edit, setEdit] = useState(true)\r\n    const [newTitle, setNewTitle] = useState('')\r\n\r\n    const activeViewMode = () => {\r\n        setEdit(true)\r\n        rename(newTitle)\r\n    }\r\n    const onChangeNameHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n\r\n    }\r\n    const onClickSpan = () => {\r\n        setEdit(false)\r\n        setNewTitle(title)\r\n    }\r\n    const onKeyPress= (e: React.KeyboardEvent<HTMLDivElement>)=> {\r\n        if (e.key === 'Enter') {\r\n            activeViewMode();\r\n        }\r\n    }\r\n    return (\r\n        edit\r\n            ? <p style={{whiteSpace:'pre-wrap', maxWidth: '200px' }} onDoubleClick={onClickSpan}>{title}</p>\r\n            : <TextField id=\"outlined-basic\"\r\n                         variant=\"outlined\"\r\n                         value={newTitle}\r\n                         size=\"small\"\r\n                         onChange={onChangeNameHandler}\r\n                         onBlur={activeViewMode}\r\n                         autoFocus\r\n                         onKeyPress={onKeyPress}\r\n                         sx={{ width: '170px' }}\r\n\r\n            />\r\n\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {Button, Checkbox, Grid, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n    removeTodolist: (todolistId: string) => void\r\n    renameTask: (todolistId: string, idTask: string, title: string) => void\r\n    renameTodoList: (todolistId: string, title: string) => void\r\n}\r\n\r\nexport function Todolist({\r\n                             title,\r\n                             tasks,\r\n                             removeTask,\r\n                             changeFilter,\r\n                             addTask,\r\n                             changeTaskStatus,\r\n                             filter,\r\n                             todolistId,\r\n                             removeTodolist,\r\n                             renameTask,\r\n                             renameTodoList\r\n                         }: PropsType) {\r\n\r\n    const addTaskHandler = (title: string) => {\r\n        addTask(todolistId, title);\r\n    }\r\n    const allClickHandler = () => changeFilter(todolistId, \"all\");\r\n    const activeClickHandler = () => changeFilter(todolistId, \"active\");\r\n    const completedClickHandler = () => changeFilter(todolistId, \"completed\");\r\n    const deleteTodoList = () => removeTodolist(todolistId)\r\n    const renameTodoListHandler = (title: string) => {\r\n        renameTodoList(todolistId, title)\r\n    }\r\n    return <div>\r\n        <h3 style={{display:'flex', justifyContent:'space-between'}}>\r\n            <EditableSpan title={title} rename={renameTodoListHandler}/>\r\n            <IconButton onClick={deleteTodoList} aria-label=\"delete\">\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm label={'Name task'} addTask={addTaskHandler}/>\r\n        <div>\r\n            {\r\n                tasks.map(t => {\r\n                    const onClickHandler = () => removeTask(todolistId, t.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        changeTaskStatus(todolistId, t.id, e.currentTarget.checked);\r\n                    }\r\n                    const renameTaskHandler = (title: string) => {\r\n                        renameTask(todolistId, t.id, title)\r\n                    }\r\n\r\n                    return <div style={{height: '60px'}} key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\r\n                            <Grid item><Checkbox\r\n\r\n\r\n                                inputProps={{'aria-label': 'controlled'}}\r\n                                size={\"small\"}\r\n                                onChange={onChangeHandler}\r\n                                checked={t.isDone}/>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <EditableSpan rename={renameTaskHandler} title={t.title}/>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <IconButton onClick={onClickHandler} aria-label=\"delete\">\r\n                                    <Delete/>\r\n                                </IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n\r\n        <div style={{display:'flex', justifyContent:'center'}}>\r\n            <Button style={{margin: '5px'}} onClick={allClickHandler}\r\n                    variant={filter === 'all' ? \"contained\" : 'outlined'}\r\n                    size={\"small\"}\r\n            >All\r\n            </Button>\r\n            <Button style={{margin: '5px'}} onClick={activeClickHandler}\r\n                    variant={filter === 'active' ? \"contained\" : 'outlined'}\r\n                    size={\"small\"}\r\n            >Active\r\n            </Button>\r\n            <Button style={{margin: '5px'}} onClick={completedClickHandler}\r\n                    variant={filter === 'completed' ? \"contained\" : 'outlined'}\r\n                    size={\"small\"}\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport {AppBar, Box, Button, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport default function ButtonAppBar() {\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}","import {TasksStateType} from \"../App\"\r\nimport {v1} from \"uuid\";\r\n\r\nexport const TasksReducer = (state: TasksStateType, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"ADD-TASK\":\r\n            const newTask = {id: v1(), title: action.payload.title, isDone: false};\r\n            return {...state, [action.payload.todolistId]: [newTask, ...state[action.payload.todolistId]]}\r\n        case \"REMOVE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .filter(t => t.id !== action.payload.taskId)\r\n            }\r\n        case \"CHANGE-STATUS-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .map(t => t.id === action.payload.taskId\r\n                        ? {...t, isDone: action.payload.isDone}\r\n                        : t)\r\n            }\r\n        case \"RENAME-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .map(t => t.id === action.payload.taskId\r\n                        ? {...t, title: action.payload.title}\r\n                        : t)\r\n            }\r\n        case \"REMOVE-TASKS\":\r\n            const newState = {...state}\r\n            delete newState[action.payload.todolistId]\r\n            return newState\r\n        case \"ADD-TODOLIST-TASKS\":\r\n            return {...state, [action.payload.todolistId]: []}\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype ActionType =\r\n    addTaskACType\r\n    | removeTaskACType\r\n    | changeStatusACType\r\n    | renameTaskACType\r\n    | removeTasksACType\r\n    | addTodolistTasksACType\r\n\r\ntype addTaskACType = ReturnType<typeof addTaskAC>\r\ntype removeTaskACType = ReturnType<typeof removeTaskAC>\r\ntype changeStatusACType = ReturnType<typeof changeStatusAC>\r\ntype renameTaskACType = ReturnType<typeof renameTaskAC>\r\ntype removeTasksACType = ReturnType<typeof removeTasksAC>\r\ntype addTodolistTasksACType = ReturnType<typeof addTodolistTasksAC>\r\n\r\nexport const addTaskAC = (todolistId: string, title: string) => {\r\n    return {\r\n        type: \"ADD-TASK\",\r\n        payload: {\r\n            todolistId: todolistId,\r\n            title: title\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: \"REMOVE-TASK\",\r\n        payload: {\r\n            todolistId: todolistId,\r\n            taskId: taskId\r\n        }\r\n    } as const\r\n}\r\nexport const changeStatusAC = (todolistId: string, taskId: string, isDone: boolean) => {\r\n    return {\r\n        type: \"CHANGE-STATUS-TASK\",\r\n        payload: {\r\n            todolistId: todolistId,\r\n            taskId: taskId,\r\n            isDone: isDone\r\n        }\r\n    } as const\r\n}\r\nexport const renameTaskAC = (todolistId: string, taskId: string, title: string) => {\r\n    return {\r\n        type: \"RENAME-TASK\",\r\n        payload: {\r\n            todolistId: todolistId,\r\n            taskId: taskId,\r\n            title: title\r\n        }\r\n    } as const\r\n}\r\nexport const removeTasksAC = (todolistId: string) => {\r\n    return {\r\n        type: \"REMOVE-TASKS\",\r\n        payload: {\r\n            todolistId: todolistId\r\n        }\r\n    } as const\r\n}\r\nexport const addTodolistTasksAC = (todolistId: string) => {\r\n    return {\r\n        type: \"ADD-TODOLIST-TASKS\",\r\n        payload: {\r\n            todolistId: todolistId\r\n        }\r\n    } as const\r\n}\r\n","import {FilterValuesType, TodoListsType} from \"../App\";\r\n\r\n\r\nexport const TodoListsReducer = (state: TodoListsType[], action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"CHANGE-FILTER\":\r\n            return state.map(tl => tl.id === action.payload.todolistId\r\n                ? {...tl, filter: action.payload.value}\r\n                : tl)\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.payload.todolistId)\r\n        case \"ADD-TODOLIST\":\r\n            const newTodoList: TodoListsType = {\r\n                id: action.payload.todolistId,\r\n                title: action.payload.title,\r\n                filter: 'all'\r\n            }\r\n            return [newTodoList, ...state]\r\n        case \"RENAME-TODOLIST\":\r\n            return state.map(tl => tl.id === action.payload.todolistId\r\n                ? {...tl, title: action.payload.title}\r\n                : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType = changeFilterACType | removeTodolistACType | addTodoListACType | renameTodoListACType\r\n\r\nexport type changeFilterACType = ReturnType<typeof changeFilterAC>\r\nexport type removeTodolistACType = ReturnType<typeof removeTodolistAC>\r\nexport type addTodoListACType = ReturnType<typeof addTodoListAC>\r\nexport type renameTodoListACType = ReturnType<typeof renameTodoListAC>\r\n\r\nexport const changeFilterAC = (todolistId: string, value: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-FILTER',\r\n        payload: {\r\n            todolistId: todolistId,\r\n            value: value\r\n        }\r\n    } as const\r\n}\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        payload: {\r\n            todolistId: todolistId,\r\n        }\r\n    } as const\r\n}\r\nexport const addTodoListAC = (todolistId: string, title: string) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        payload: {\r\n            todolistId: todolistId,\r\n            title: title\r\n        }\r\n    } as const\r\n}\r\nexport const renameTodoListAC = (todolistId: string, title: string) => {\r\n    return {\r\n        type: 'RENAME-TODOLIST',\r\n        payload: {\r\n            todolistId: todolistId,\r\n            title: title\r\n        }\r\n    } as const\r\n}\r\n","import React, {useReducer} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport ButtonAppBar from \"./components/ButtonAppBar\";\r\nimport {\r\n    addTaskAC,\r\n    addTodolistTasksAC,\r\n    changeStatusAC,\r\n    removeTaskAC,\r\n    removeTasksAC,\r\n    renameTaskAC,\r\n    TasksReducer\r\n} from \"./reducers/TasksReducer\";\r\nimport {\r\n    addTodoListAC,\r\n    changeFilterAC,\r\n    removeTodolistAC,\r\n    renameTodoListAC,\r\n    TodoListsReducer\r\n} from \"./reducers/TodolistsReducer\";\r\nimport {Container, Grid, Paper} from \"@material-ui/core\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todoLists, todolistDispatch] = useReducer(TodoListsReducer, [\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, tasksDispatch] = useReducer(TasksReducer, {\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n    console.log(tasks)\r\n\r\n    function removeTask(todolistId: string, taskId: string) {\r\n        tasksDispatch(removeTaskAC(todolistId, taskId))\r\n        // setTasks({...tasks, [todolistId]: tasks[todolistId].filter(t => t.id !== id)})\r\n    }\r\n\r\n    function addTask(todolistId: string, title: string) {\r\n        // let newTask = {id: v1(), title: title, isDone: false};\r\n        tasksDispatch(addTaskAC(todolistId, title))\r\n        // setTasks({...tasks, [todolistId]: [newTask, ...tasks[todolistId]]})\r\n    }\r\n\r\n    function changeStatus(todolistId: string, taskId: string, isDone: boolean) {\r\n        tasksDispatch(changeStatusAC(todolistId, taskId, isDone))\r\n        // setTasks({...tasks, [todolistId]: tasks[todolistId].map(m => m.id === taskId ? {...m, isDone} : m)})\r\n    }\r\n\r\n    const renameTask = (todolistId: string, taskId: string, title: string) => {\r\n        tasksDispatch(renameTaskAC(todolistId, taskId, title))\r\n        // setTasks({...tasks, [todolistId]: tasks[todolistId].map(m => m.id === idTask ? {...m, title} : m)})\r\n    }\r\n\r\n    function changeFilter(todolistId: string, value: FilterValuesType) {\r\n        todolistDispatch(changeFilterAC(todolistId, value))\r\n    }\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        todolistDispatch(removeTodolistAC(todolistId))\r\n        tasksDispatch(removeTasksAC(todolistId))\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const newId = v1()\r\n        todolistDispatch(addTodoListAC(newId, title))\r\n        tasksDispatch(addTodolistTasksAC(newId))\r\n    }\r\n\r\n    const renameTodoList = (todolistId: string, title: string) => {\r\n        todolistDispatch(renameTodoListAC(todolistId, title))\r\n    }\r\n    return (\r\n        <div>\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container justifyContent={\"center\"} style={{padding: \"20px\"}}>\r\n                    <AddItemForm label={'Name Todolist'} addTask={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n\r\n                    {todoLists.map(m => {\r\n\r\n                        let tasksForTodolist = tasks[m.id];\r\n\r\n                        if (m.filter === \"active\") {\r\n                            tasksForTodolist = tasks[m.id].filter(t => !t.isDone);\r\n                        }\r\n                        if (m.filter === \"completed\") {\r\n                            tasksForTodolist = tasks[m.id].filter(t => t.isDone);\r\n                        }\r\n\r\n                        return (\r\n                            <Grid key={m.id} item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist title={m.title}\r\n                                              todolistId={m.id}\r\n                                              tasks={tasksForTodolist}\r\n                                              removeTask={removeTask}\r\n                                              changeFilter={changeFilter}\r\n                                              addTask={addTask}\r\n                                              changeTaskStatus={changeStatus}\r\n                                              filter={m.filter}\r\n                                              key={m.id}\r\n                                              removeTodolist={removeTodolist}\r\n                                              renameTask={renameTask}\r\n                                              renameTodoList={renameTodoList}\r\n                                    />\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}