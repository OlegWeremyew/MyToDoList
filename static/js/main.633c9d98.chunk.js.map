{"version":3,"sources":["api/todolistApi.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","Todolist.tsx","state/todolistsReducer.ts","state/tasksReducer.ts","components/ButtonAppBar/ButtonAppBar.tsx","App.tsx","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","label","useState","title","setTitle","error","setError","addItemHandler","trim","TextField","variant","size","value","onChange","e","currentTarget","onKeyPress","key","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","axios","create","withCredentials","baseURL","headers","Task","task","removeTask","todolistId","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","id","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","className","status","Checkbox","Delete","Todolist","props","addTask","removeTodolist","changeTodolistTitle","changeFilter","tasksForTodolist","tasks","filter","t","map","style","paddingTop","Button","initialState","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","mr","Menu","Typography","component","App","todoLists","useSelector","state","todolists","dispatch","useDispatch","taskId","type","payload","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","rootReducer","combineReducers","action","stateCopy","newTasks","newTask","priority","Low","startDate","deadline","todoListId","order","addedDate","description","todolistTasks","copyState","todolist","find","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.633c9d98.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    headers: {\r\n        'API-KEY': 'f5a121b3-d5d2-4866-a73a-ab1418f0e4d8',\r\n    },\r\n})\r\n\r\nexport const todolistAPI = {\r\n\r\n    // todolist =============================\r\n    getTodos(): Promise<AxiosResponse<TodolistType[]>> {\r\n        return instance.get<TodolistType[]>(`todo-lists/`)\r\n    },\r\n\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists/`, {title})\r\n    },\r\n\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    // tasks =============================\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks/`)\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/`), {title})\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/${taskId}`), model)\r\n    },\r\n}\r\n\r\n// types ====================================\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    label: string\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, label}: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"standard\"\r\n                   error={error}\r\n                   size=\"small\"\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label={error ? \"Title is required\" : label}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange}: EditableSpanPropsType) =>{\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? (<TextField\r\n                value={title}\r\n                onChange={changeTitle}\r\n                autoFocus onBlur={activateViewMode}\r\n            />)\r\n            : (<span\r\n                onDoubleClick={activateEditMode}>\r\n                {value}\r\n        </span>)\r\n    )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolistApi\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskID: string, newValue: string, todolistID: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({\r\n                                    task,\r\n                                    removeTask,\r\n                                    todolistId,\r\n                                    changeTaskStatus,\r\n                                    changeTaskTitle\r\n                                }: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todolistId)\r\n    }, [task.id, todolistId, removeTask])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId);\r\n    }, [task.id, todolistId, changeTaskStatus])\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId);\r\n    }, [task.id, todolistId, changeTaskTitle])\r\n\r\n\r\n    return (\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                checked={task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {AddItemForm} from './components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from './components/EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./components/Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolistApi\";\r\nimport {FilterValuesType} from \"./state/todolistsReducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id);\r\n    },[props.removeTodolist,props.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    const onClickHandler = useCallback((value: FilterValuesType) => {\r\n        props.changeFilter(value, props.id)\r\n    }, [props.changeFilter, props.id]);\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status ===  TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm label={'Name task'} addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return (\r\n                        <Task\r\n                            key={t.id}\r\n                            todolistId={props.id}\r\n                            task={t}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('all')}\r\n                    color={'success'}>\r\n                All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('active')}\r\n                    color={'primary'}>\r\n                Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('completed')}\r\n                    color={'secondary'}>\r\n                Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {TodolistType} from \"../api/todolistApi\";\r\n\r\ntype ActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.payload.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.payload.todolistId,\r\n                title: action.payload.title,\r\n                filter: 'all',\r\n                addedDate: \"\",\r\n                order: 0,\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.payload.id);\r\n            if (todolist) {\r\n                todolist.title = action.payload.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.payload.id);\r\n            if (todolist) {\r\n                todolist.filter = action.payload.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        payload: {\r\n            id: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (title: string) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        payload: {\r\n            title: title,\r\n            todolistId: v1(),\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        payload: {\r\n            id: id,\r\n            title: title,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        payload: {\r\n            id: id,\r\n            filter: filter,\r\n        }\r\n    } as const\r\n}\r\n","import {TasksStateType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolistsReducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType} from \"../api/todolistApi\";\r\n\r\ntype ActionsType = RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.payload.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.payload.taskId);\r\n            stateCopy[action.payload.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.payload.title,\r\n                status: TaskStatuses.New,\r\n                priority: TaskPriorities.Low,\r\n                startDate: \"\",\r\n                deadline: \"\",\r\n                todoListId: action.payload.todolistId,\r\n                order: 0,\r\n                addedDate: \"\",\r\n                description: \"\",\r\n            }\r\n            const tasks = stateCopy[action.payload.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.payload.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .map(t => (t.id === action.payload.taskId)\r\n                        ? {...t, status: action.payload.status}\r\n                        : t)\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.payload.todolistId];\r\n            state[action.payload.todolistId] = todolistTasks\r\n                .map(t => t.id === action.payload.taskId\r\n                    ? {...t, title: action.payload.title}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.payload.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            taskId: taskId,\r\n            todolistId: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (title: string, todolistId: string) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            title, todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        payload: {\r\n            status,\r\n            todolistId,\r\n            taskId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        payload: {\r\n            title,\r\n            todolistId,\r\n            taskId,\r\n        }\r\n    } as const\r\n}\r\n","import * as React from 'react';\r\nimport {AppBar, Box, Button, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\n\r\n\r\nexport const ButtonAppBar = () => {\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './components/AddItemForm/AddItemForm';\r\nimport {Container, Grid, Paper} from '@material-ui/core';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    FilterValuesType,\r\n    removeTodolistAC, TodolistDomainType\r\n} from './state/todolistsReducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasksReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {ButtonAppBar} from \"./components/ButtonAppBar/ButtonAppBar\";\r\nimport {TaskStatuses, TaskType, TodolistType} from \"./api/todolistApi\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst App = () => {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskAC(id, todolistId));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskAC(title, todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(id, status, todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(id, newTitle, todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value));\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistAC(id));\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodolistTitleAC(id, title));\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistAC(title));\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm label={'Name todolist'} addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\nexport default App\r\n","import {tasksReducer} from './tasksReducer';\r\nimport {todolistsReducer} from './todolistsReducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}