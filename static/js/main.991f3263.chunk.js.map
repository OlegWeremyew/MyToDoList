{"version":3,"sources":["api/todolistApi.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","state/tasksReducer.ts","Todolist.tsx","state/todolistsReducer.ts","components/ButtonAppBar/ButtonAppBar.tsx","App.tsx","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","label","useState","title","setTitle","error","setError","addItemHandler","trim","TextField","variant","size","value","onChange","e","currentTarget","onKeyPress","key","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","get","post","todolistId","delete","taskId","model","put","Task","task","removeTask","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","id","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","className","status","Checkbox","Delete","initialState","Todolist","props","dispatch","useDispatch","useEffect","then","res","tasks","data","items","type","payload","setTasksAC","addTask","removeTodolist","changeTodolistTitle","changeFilter","tasksForTodolist","filter","t","map","style","paddingTop","Button","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","mr","Menu","Typography","component","App","todos","todoLists","useSelector","state","todolists","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","getState","find","startDate","priority","description","deadline","changeTaskStatusAC","updateTaskStatusTC","newTitle","changeTaskTitleAC","removeTodolistAC","changeTodolistTitleAC","addTodolist","todolist","addTodolistTC","Container","fixed","Grid","container","padding","spacing","tl","Paper","rootReducer","combineReducers","action","stateCopy","forEach","f","todoListId","todolistTasks","copyState","m","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.991f3263.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    headers: {\r\n        'API-KEY': 'f5a121b3-d5d2-4866-a73a-ab1418f0e4d8',\r\n    },\r\n})\r\n\r\nexport const todolistAPI = {\r\n\r\n    // todolist =============================\r\n    getTodos(): Promise<AxiosResponse<TodolistType[]>> {\r\n        return instance.get<TodolistType[]>(`todo-lists/`)\r\n    },\r\n\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists/`, {title})\r\n    },\r\n\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    // tasks =============================\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks/`)\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/`), {title})\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/${taskId}`), model)\r\n    },\r\n}\r\n\r\n// types ====================================\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    label: string\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, label}: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"standard\"\r\n                   error={error}\r\n                   size=\"small\"\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label={error ? \"Title is required\" : label}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange}: EditableSpanPropsType) =>{\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? (<TextField\r\n                value={title}\r\n                onChange={changeTitle}\r\n                autoFocus onBlur={activateViewMode}\r\n            />)\r\n            : (<span\r\n                onDoubleClick={activateEditMode}>\r\n                {value}\r\n        </span>)\r\n    )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolistApi\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskID: string, newValue: string, todolistID: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({\r\n                                    task,\r\n                                    removeTask,\r\n                                    todolistId,\r\n                                    changeTaskStatus,\r\n                                    changeTaskTitle\r\n                                }: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todolistId)\r\n    }, [task.id, todolistId, removeTask])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId);\r\n    }, [task.id, todolistId, changeTaskStatus])\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId);\r\n    }, [task.id, todolistId, changeTaskTitle])\r\n\r\n\r\n    return (\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                checked={task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import {TasksStateType} from '../App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, setTodosActionType} from './todolistsReducer';\r\nimport {TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../api/todolistApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\ntype ActionsType =\r\n    | RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | setTodosActionType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TODOS\": {\r\n            let stateCopy = {...state}\r\n            action.payload.todos.forEach(f => stateCopy[f.id] = [])\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            return {...state, [action.payload.todolistId]:state[action.payload.todolistId].filter(f=>f.id !== action.payload.taskId)}\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {...state, [action.payload.task.todoListId] : [action.payload.task, ...state[action.payload.task.todoListId]]}\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .map(t => (t.id === action.payload.taskId)\r\n                        ? {...t, status: action.payload.status}\r\n                        : t)\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.payload.todolistId];\r\n            state[action.payload.todolistId] = todolistTasks\r\n                .map(t => t.id === action.payload.taskId\r\n                    ? {...t, title: action.payload.title}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.payload.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.payload.todolistId] = action.payload.tasks\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            taskId: taskId,\r\n            todolistId: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            task,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        payload: {\r\n            status,\r\n            todolistId,\r\n            taskId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        payload: {\r\n            title,\r\n            todolistId,\r\n            taskId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {\r\n        type: 'SET-TASKS',\r\n        payload: {\r\n            tasks,\r\n            todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\n//Thunk\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            let task = res.data.data.item\r\n            dispatch(addTaskAC(task))\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, todolistId: string, status: TaskStatuses) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n    const allTasksFromState = getState().tasks;\r\n    const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n    const task = tasksForCurrentTodolist.find(t => {\r\n        return t.id === taskId\r\n    })\r\n\r\n    if (task) {\r\n\r\n        const model: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: status\r\n        }\r\n        todolistAPI.updateTask(todolistId, taskId, model)\r\n            .then(() => {\r\n                dispatch(changeTaskStatusAC(taskId, status, todolistId))\r\n            })\r\n    }\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from './components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from './components/EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./components/Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolistApi\";\r\nimport {FilterValuesType} from \"./state/todolistsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./state/tasksReducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id);\r\n    }, [props.removeTodolist, props.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    const onClickHandler = useCallback((value: FilterValuesType) => {\r\n        props.changeFilter(value, props.id)\r\n    }, [props.changeFilter, props.id]);\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm label={'Name task'} addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return (\r\n                        <Task\r\n                            key={t.id}\r\n                            todolistId={props.id}\r\n                            task={t}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('all')}\r\n                    color={'success'}>\r\n                All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('active')}\r\n                    color={'primary'}>\r\n                Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('completed')}\r\n                    color={'secondary'}>\r\n                Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {todolistAPI, TodolistType} from \"../api/todolistApi\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | setTodosActionType\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.payload.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{...action.payload.todolist, filter: 'all'}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(m => m.id === action.payload.id ? {...m, title: action.payload.title} : m)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(m => m.id === action.payload.id ? {...m, filter: action.payload.filter} : m)\r\n        }\r\n        case \"SET-TODOS\": {\r\n            return action.payload.todos.map(m => ({...m, filter: \"all\"}))\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        payload: {\r\n            id: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        payload: {\r\n            todolist,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        payload: {\r\n            id: id,\r\n            title: title,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        payload: {\r\n            id: id,\r\n            filter: filter,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setTodosActionType = ReturnType<typeof setTodosAC>\r\nexport const setTodosAC = (todos: Array<TodolistType>) => {\r\n    return {\r\n        type: \"SET-TODOS\",\r\n        payload: {\r\n            todos,\r\n        },\r\n    } as const\r\n}\r\n\r\n// Thunk\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    todolistAPI.getTodos()\r\n        .then(res => {\r\n            dispatch(setTodosAC(res.data))\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.deleteTodo(todolistId)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.createTodo(title)\r\n        .then(res => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}","import * as React from 'react';\r\nimport {AppBar, Box, Button, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from '@material-ui/icons';\r\n\r\n\r\nexport const ButtonAppBar = () => {\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './components/AddItemForm/AddItemForm';\r\nimport {Container, Grid, Paper} from '@material-ui/core';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC, fetchTodolistsTC,\r\n    FilterValuesType, removeTodolistTC, TodolistDomainType\r\n} from './state/todolistsReducer';\r\nimport {\r\n    addTaskTC,\r\n    changeTaskTitleAC,\r\n    removeTaskTC,\r\n    updateTaskStatusTC\r\n} from './state/tasksReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {ButtonAppBar} from \"./components/ButtonAppBar/ButtonAppBar\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolistApi\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst App = () => {\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(id, todolistId));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskStatusTC(id, todolistId, status))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(id, newTitle, todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value));\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id));\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodolistTitleAC(id, title));\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm label={'Name todolist'} addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\nexport default App\r\n","import {tasksReducer} from './tasksReducer';\r\nimport {todolistsReducer} from './todolistsReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}