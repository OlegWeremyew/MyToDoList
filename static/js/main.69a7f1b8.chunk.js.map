{"version":3,"sources":["components/Input.tsx","components/Span.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","props","useState","title","setTitle","error","setError","addTask","newTitle","trim","callBack","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","Span","status","setStatus","localtitle","setLocalTitle","onBlur","autoFocus","onDoubleClick","Todolist","updateTodolist","id","removeTodolist","tasks","map","t","isDone","type","newIsDoneValue","checked","changeTaskStatus","updateTask","removeTask","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolistTasks","task","changeStatus","find","todolist","tl","console","log","m","newID","addTodolist","allTodolistTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.69a7f1b8.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype InputType = {\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const Input = (props: InputType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== \"\") {\r\n            props.callBack(newTitle);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === \"Enter\") {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const Span = (props: PropsType) => {\r\n\r\n        const [status, setStatus] = useState<boolean>(false)\r\n        let [localtitle, setLocalTitle] = useState(props.title)\r\n\r\n        const StatusTrue = () => {\r\n            setStatus(true)\r\n        }\r\n\r\n        const onBlurHandler = () => {\r\n            setStatus(false)\r\n            props.callBack(localtitle)\r\n        }\r\n\r\n        const onchangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newTitle = e.currentTarget.value\r\n            setLocalTitle(newTitle)\r\n        }\r\n\r\n        return (\r\n            status ?\r\n                <input\r\n                    onChange={onchangeHandler}\r\n                    onBlur={onBlurHandler}\r\n                    value={localtitle} autoFocus/> :\r\n                <span onDoubleClick={StatusTrue}>{props.title}</span>\r\n        );\r\n    }\r\n;\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {Input} from \"./components/Input\";\r\nimport {Span} from \"./components/Span\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    updateTask: (todolistId: string, id: string, title: string) => void\r\n    updateTodolist: (todolistId: string, title: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    const callBackHandler = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const updateShapkaHandler = (title: string) => {\r\n        props.updateTodolist(props.id, title)\r\n    }\r\n\r\n    return <div>\r\n        <h3><Span title={props.title} callBack={updateShapkaHandler}/>\r\n            <button onClick={removeTodolist}>x</button>\r\n        </h3>\r\n        <div>\r\n            <Input callBack={callBackHandler}/>\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n\r\n                    const callBackInputHandler = (title: string) => {\r\n                        props.updateTask(props.id, t.id, title)\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        <Span title={t.title} callBack={callBackInputHandler}/>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from 'uuid';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {Input} from \"./components/Input\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id !== id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        console.log(title)\r\n        let newID = v1()\r\n        const newTodolist: TodolistType = {id: newID, title: title, filter: \"all\"}\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks(\r\n            {\r\n                ...tasks, [newID]: [\r\n                    {id: v1(), title: \"Milk\", isDone: true},\r\n                    {id: v1(), title: \"React Book\", isDone: true}\r\n                ]\r\n            })\r\n    }\r\n\r\n    const updateTask = (todolistId: string, id: string, title: string) => {\r\n        console.log(\"fgfg\")\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(m => m.id === id ? {...m, title: title} : m)})\r\n    }\r\n\r\n    const updateTodolist = (todolistId: string, title: string) => {\r\n        setTodolists([...todolists.map(m => m.id === todolistId ? {...m, title: title} : m)])\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <Input callBack={(title: string) => addTodolist(title)}/>\r\n\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                    }\r\n\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        updateTask={updateTask}\r\n                        updateTodolist={updateTodolist}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}