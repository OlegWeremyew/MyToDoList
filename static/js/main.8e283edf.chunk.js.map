{"version":3,"sources":["components/PageNotFound/PageNotFound.module.css","api/todolistApi.ts","App/AppReducer.ts","features/Login/authReducer.ts","utils/errorUtils.ts","features/TodolistList/todolistsReducer.ts","components/ButtonAppBar/ButtonAppBar.tsx","features/TodolistList/tasksReducer.ts","utils/RouterPATH.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistList/Todolist/Task/Task.tsx","features/TodolistList/Todolist/Todolist.tsx","utils/appSelectors.ts","features/TodolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/PageNotFound/PageNotFound.tsx","App/App.tsx","App/store.ts","index.tsx","features/TodolistList/Todolist/Task/Task.module.css","App/App.module.css","features/TodolistList/Todolist/TodolistList.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","get","title","post","todolistId","put","delete","taskId","model","authAPI","data","appEnumReducer","initialState","status","error","isInitialized","authEnumReducer","AppAction","type","SET_ERROR","payload","SET_STATUS","SET_INITIALIZED","handleServerAppError","dispatch","messages","length","handleServerNetworkError","err","message","isLoggedIn","todolistEnumReducer","setIsLoggedInAC","value","SET_IS_LOGGED_IN","ButtonAppBar","useSelector","state","app","auth","useDispatch","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","color","mr","Typography","variant","component","Button","onClick","then","res","resultCode","catch","LinearProgress","taskEnumReducer","fetchTodolistsTC","todos","SET_TODOS","removeTodolistTC","id","CHANGE_TODOLIST_ENTITY_STATUS","REMOVE_TODOLIST","removeTodolistAC","addTodolistTC","todolist","item","ADD_TODOLIST","ChangeTodolistTitleTC","CHANGE_TODOLIST_TITLE","changeTodolistTitleAC","PATH","fetchTasksTC","tasks","items","SET_TASKS","setTasksAC","removeTaskTC","REMOVE_TASK","removeTaskAC","addTaskTC","task","ADD_TASK","addTaskAC","updateTaskTC","domainModel","getState","find","t","apiModel","startDate","priority","description","deadline","UPDATE_TASK","updateTaskAC","AddItemForm","React","memo","addItem","label","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","key","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","className","classes","containerTask","mainBlock","Checkbox","Delete","fontSize","Todolist","demo","addTaskCallBack","removeTodolistCallBack","changeTodolistTitleCallBack","changeFilterCallBack","props","useEffect","addTask","removeTodolist","changeTodolistTitle","tasksForTodolist","filter","style","todolist__title","entityStatus","map","paddingTop","getIsInitializedSelector","getIsLoggedInSelector","getTaskSelector","getTodoLists","todolists","TodolistList","todoLists","changeStatus","newTitle","changeFilter","CHANGE_TODOLIST_FILTER","addTodolist","Grid","container","padding","justifyContent","spacing","tl","Paper","to","LOGIN","Alert","ref","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","MAIN_WINDOW","FormControl","FormLabel","href","target","rel","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","PageNotFound","pageNotFound","App","finally","Container","fixed","path","element","PAGE_NOT_FOUND","ERROR","preloader","CircularProgress","rootReducer","combineReducers","action","f","todoListId","m","copyState","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e283edf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"PageNotFound_pageNotFound__78dtJ\"};","import axios, {AxiosResponse} from \"axios\";\r\nimport {Nullable} from \"../types/Nullable\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    headers: {\r\n        'API-KEY': 'f5a121b3-d5d2-4866-a73a-ab1418f0e4d8',\r\n    },\r\n})\r\n\r\nexport const todolistAPI = {\r\n\r\n    // todolist =============================\r\n    getTodos(): Promise<AxiosResponse<TodolistType[]>> {\r\n        return instance.get<TodolistType[]>(`todo-lists/`)\r\n    },\r\n\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists/`, {title})\r\n    },\r\n\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    // tasks =============================\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks/`)\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/`), {title})\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/${taskId}`), model)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(\"/auth/login\", data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ data: ResponseMeType }>>(\"/auth/me\")\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(\"/auth/login\")\r\n    },\r\n}\r\n\r\n\r\n// types ====================================\r\n\r\ntype ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    error: Nullable<string>\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolistApi\";\r\nimport {setIsLoggedInAC} from \"../features/Login/authReducer\";\r\nimport {Nullable} from \"../types/Nullable\";\r\nimport {InferActionTypes} from \"./store\";\r\n\r\nexport const initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null,\r\n    isInitialized: false,\r\n}\r\n\r\nexport enum appEnumReducer {\r\n    SET_STATUS = 'TODOLIST/APP_REDUCER/SET-STATUS',\r\n    SET_ERROR = 'TODOLIST/APP_REDUCER/SET_ERROR',\r\n    SET_INITIALIZED = 'TODOLIST/APP_REDUCER/SET_INITIALIZED',\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionAppTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case appEnumReducer.SET_STATUS:\r\n            return {...state, status: action.payload.status}\r\n        case appEnumReducer.SET_ERROR:\r\n            return {...state, error: action.payload.error}\r\n        case appEnumReducer.SET_INITIALIZED:\r\n            return {...state, isInitialized: action.payload.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ActionCreators=============================\r\nexport const AppAction = {\r\n    setAppErrorAC(error: Nullable<string>) {\r\n        return {\r\n            type: appEnumReducer.SET_ERROR,\r\n            payload: {\r\n                error,\r\n            },\r\n        } as const\r\n    },\r\n    setAppStatusAC(status: RequestStatusType) {\r\n        return {\r\n            type: appEnumReducer.SET_STATUS,\r\n            payload: {\r\n                status,\r\n            },\r\n        } as const\r\n    },\r\n    setInitializedAC(isInitialized: boolean){\r\n        return {\r\n            type: appEnumReducer.SET_INITIALIZED,\r\n            payload: {\r\n                isInitialized,\r\n            },\r\n        } as const\r\n    },\r\n}\r\n\r\n\r\n\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n            } else {\r\n\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(AppAction.setInitializedAC(true))\r\n        })\r\n}\r\n\r\n//Types ========================================================\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: Nullable<string>,\r\n    isInitialized: boolean,\r\n}\r\n\r\nexport type ActionAppTypes = InferActionTypes<typeof AppAction>","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolistApi\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {ActionAppTypes, AppAction} from \"../../App/AppReducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n}\r\n\r\nexport enum authEnumReducer {\r\n    SET_IS_LOGGED_IN = 'TODOLIST/AUTH_REDUCER/SET_IS_LOGGED_IN',\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case authEnumReducer.SET_IS_LOGGED_IN:\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport type setIsLoggedInType = ReturnType<typeof setIsLoggedInAC>\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: authEnumReducer.SET_IS_LOGGED_IN, value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(AppAction.setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionsType = setIsLoggedInType | ActionAppTypes\r\n","import {ActionAppTypes, AppAction} from \"../App/AppReducer\";\r\nimport {ResponseType} from \"../api/todolistApi\";\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<ActionAppTypes>) => {\r\n    if (data.messages.length) {\r\n        dispatch(AppAction.setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(AppAction.setAppErrorAC(\"Some error\"))\r\n    }\r\n    dispatch(AppAction.setAppStatusAC(\"failed\"))\r\n}\r\n\r\nexport const handleServerNetworkError = (err: { message: string }, dispatch: Dispatch<ActionAppTypes>) => {\r\n    dispatch(AppAction.setAppErrorAC(err.message ? err.message : \"Some error\"))\r\n    dispatch(AppAction.setAppStatusAC(\"failed\"))\r\n}","import {todolistAPI, TodolistType} from \"../../api/todolistApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionAppTypes, AppAction, RequestStatusType} from \"../../App/AppReducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport enum todolistEnumReducer {\r\n    REMOVE_TODOLIST = 'TODOLIST/TODOLIST_REDUCER/REMOVE-TODOLIST',\r\n    ADD_TODOLIST = 'TODOLIST/TODOLIST_REDUCER/ADD_TODOLIST',\r\n    CHANGE_TODOLIST_TITLE = 'TODOLIST/TODOLIST_REDUCER/CHANGE-TODOLIST-TITLE',\r\n    CHANGE_TODOLIST_FILTER = 'TODOLIST/TODOLIST_REDUCER/CHANGE_TODOLIST_FILTER',\r\n    CHANGE_TODOLIST_ENTITY_STATUS = 'TODOLIST/TODOLIST_REDUCER/CHANGE_TODOLIST_ENTITY_STATUS',\r\n    SET_TODOS = 'TODOLIST/TODOLIST_REDUCER/SET_TODOS',\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case todolistEnumReducer.REMOVE_TODOLIST: {\r\n            return state\r\n                .filter(tl => tl.id !== action.payload.id)\r\n        }\r\n        case todolistEnumReducer.ADD_TODOLIST: {\r\n            return [{...action.payload.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        }\r\n        case todolistEnumReducer.CHANGE_TODOLIST_TITLE: {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, title: action.payload.title}\r\n                    : m)\r\n        }\r\n        case todolistEnumReducer.CHANGE_TODOLIST_FILTER: {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, filter: action.payload.filter}\r\n                    : m)\r\n        }\r\n        case todolistEnumReducer.CHANGE_TODOLIST_ENTITY_STATUS: {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, entityStatus: action.payload.status}\r\n                    : m)\r\n        }\r\n        case todolistEnumReducer.SET_TODOS: {\r\n            return action.payload.todos\r\n                .map(m => ({...m, filter: \"all\", entityStatus: \"idle\"}))\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {\r\n        type: todolistEnumReducer.REMOVE_TODOLIST,\r\n        payload: {\r\n            id: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {\r\n        type: todolistEnumReducer.ADD_TODOLIST,\r\n        payload: {\r\n            todolist,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: todolistEnumReducer.CHANGE_TODOLIST_TITLE,\r\n        payload: {\r\n            id: id,\r\n            title: title,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: todolistEnumReducer.CHANGE_TODOLIST_FILTER,\r\n        payload: {\r\n            id: id,\r\n            filter: filter,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setTodosActionType = ReturnType<typeof setTodosAC>\r\nexport const setTodosAC = (todos: Array<TodolistType>) => {\r\n    return {\r\n        type: todolistEnumReducer.SET_TODOS,\r\n        payload: {\r\n            todos,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type changeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => {\r\n    return {\r\n        type: todolistEnumReducer.CHANGE_TODOLIST_ENTITY_STATUS,\r\n        payload: {\r\n            id,\r\n            status,\r\n        },\r\n    } as const\r\n}\r\n\r\n// Thunk=============================================================\r\nexport const fetchTodolistsTC = () => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    todolistAPI.getTodos()\r\n        .then(res => {\r\n            dispatch(setTodosAC(res.data))\r\n            dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n    todolistAPI.deleteTodo(todolistId)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    todolistAPI.createTodo(title)\r\n        .then(res => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n            dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const ChangeTodolistTitleTC = (id: string, title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    todolistAPI.updateTodoTitle(id, title)\r\n        .then(res => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n            dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\n//types\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | setTodosActionType\r\n    | changeTodolistEntityStatusType\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type ThunkDispatchType = Dispatch<ActionsType | ActionAppTypes>","import * as React from 'react';\r\nimport {AppBar, Box, Button, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {RequestStatusType} from \"../../App/AppReducer\";\r\nimport {logoutTC} from \"../../features/Login/authReducer\";\r\n\r\n\r\nexport const ButtonAppBar = () => {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        Todolist\r\n                    </Typography>\r\n                    {\r\n                        isLoggedIn\r\n                        && <Button variant=\"outlined\" onClick={logoutHandler} color=\"inherit\">Logout</Button>\r\n                    }\r\n                </Toolbar>\r\n                {\r\n                    status === \"loading\"\r\n                    && <>\r\n                        <LinearProgress/>\r\n                    </>\r\n                }\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}","import {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    setTodosActionType,\r\n    todolistEnumReducer\r\n} from './todolistsReducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../../api/todolistApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {TasksStateType} from \"./TodolistList\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {ActionAppTypes, AppAction} from \"../../App/AppReducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport enum taskEnumReducer {\r\n    REMOVE_TASK = 'TODOLIST/TASK_REDUCER/REMOVE_TASK',\r\n    ADD_TASK = 'TODOLIST/TASK_REDUCER/ADD_TASK',\r\n    UPDATE_TASK = 'TODOLIST/TASK_REDUCER/UPDATE_TASK',\r\n    SET_TASKS = 'TODOLIST/TASK_REDUCER/SET-TASKS',\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case taskEnumReducer.REMOVE_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .filter(f => f.id !== action.payload.taskId)\r\n            }\r\n        }\r\n        case taskEnumReducer.ADD_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]]\r\n            }\r\n        }\r\n        case taskEnumReducer.UPDATE_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .map(m => m.id === action.payload.taskId\r\n                        ? {...m, ...action.payload.model}\r\n                        : m)\r\n            }\r\n        }\r\n        case todolistEnumReducer.ADD_TODOLIST: {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolist.id]: []\r\n            }\r\n        }\r\n        case todolistEnumReducer.REMOVE_TODOLIST: {\r\n            const copyState = {...state};\r\n            delete copyState[action.payload.id];\r\n            return copyState;\r\n        }\r\n        case todolistEnumReducer.SET_TODOS: {\r\n            let stateCopy = {...state}\r\n            action.payload.todos\r\n                .forEach(f => stateCopy[f.id] = [])\r\n            return stateCopy\r\n        }\r\n        case taskEnumReducer.SET_TASKS: {\r\n            return {...state, [action.payload.todolistId]: action.payload.tasks}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return {\r\n        type: taskEnumReducer.REMOVE_TASK,\r\n        payload: {\r\n            taskId: taskId,\r\n            todolistId: todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: taskEnumReducer.ADD_TASK,\r\n        payload: {\r\n            task,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type updateTaskActionType = ReturnType<typeof updateTaskAC>\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => {\r\n    return {\r\n        type: taskEnumReducer.UPDATE_TASK,\r\n        payload: {\r\n            model,\r\n            todolistId,\r\n            taskId,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {\r\n        type: taskEnumReducer.SET_TASKS,\r\n        payload: {\r\n            tasks,\r\n            todolistId,\r\n        }\r\n    } as const\r\n}\r\n\r\n//Thunk===================================================================================\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                let task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: ThunkDispatchType, getState: () => AppRootStateType) => {\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n                ...domainModel,\r\n            }\r\n            todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    handleServerNetworkError(err, dispatch)\r\n                })\r\n        }\r\n    }\r\n\r\n//types===============================================\r\nexport type ThunkDispatchType = Dispatch<ActionsType | ActionAppTypes>\r\n\r\ntype ActionsType =\r\n    | RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | updateTaskActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | setTodosActionType\r\n    | SetTasksActionType\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","export enum PATH {\r\n    MAIN_WINDOW = '/',\r\n    LOGIN =\"login\",\r\n    PAGE_NOT_FOUND = '404',\r\n    ERROR = '*',\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    label: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, label, disabled = false}: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            disabled={disabled}\r\n            variant=\"standard\"\r\n            error={error}\r\n            size=\"small\"\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label={error ? \"Title is required\" : label}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange}: EditableSpanPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(value)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? (\r\n                <TextField\r\n                    variant=\"standard\"\r\n                    value={title}\r\n                    onChange={changeTitle}\r\n                    autoFocus onBlur={activateViewMode}\r\n                />\r\n            ) : (\r\n                <span onDoubleClick={activateEditMode}>\r\n                    {value}\r\n                </span>\r\n            )\r\n    )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport classes from './Task.module.css'\r\n\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolistApi\";\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({\r\n                                                             task,\r\n                                                             removeTask,\r\n                                                             todolistId,\r\n                                                             changeTaskStatus,\r\n                                                             changeTaskTitle\r\n                                                         }) => {\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todolistId)\r\n    }, [task.id, todolistId, removeTask])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId);\r\n    }, [task.id, todolistId, changeTaskStatus])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId);\r\n    }, [task.id, todolistId, changeTaskTitle])\r\n\r\n    return (\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <div className={classes.containerTask}>\r\n                <div className={classes.mainBlock}>\r\n                    <Checkbox\r\n                        checked={task.status === TaskStatuses.Completed}\r\n                        color=\"primary\"\r\n                        onChange={onChangeHandler}\r\n                    />\r\n                    <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n                </div>\r\n                <IconButton onClick={onClickHandler} size=\"small\">\r\n                    <Delete fontSize=\"inherit\"/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n//type\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskID: string, newValue: string, todolistID: string) => void\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport style from './TodolistList.module.css'\r\n\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolistApi\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolistsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasksReducer\";\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo(({\r\n                                                             demo = false,\r\n                                                             changeTaskStatus,\r\n                                                             addTaskCallBack,\r\n                                                             todolist,\r\n                                                             removeTodolistCallBack,\r\n                                                             changeTodolistTitleCallBack,\r\n                                                             changeTaskTitle,\r\n                                                             removeTask,\r\n                                                             changeFilterCallBack,\r\n                                                             ...props\r\n                                                         }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [demo, dispatch, todolist.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        addTaskCallBack(title, todolist.id)\r\n    }, [addTaskCallBack, todolist.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        removeTodolistCallBack(todolist.id)\r\n    }, [removeTodolistCallBack, todolist.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleCallBack(todolist.id, title)\r\n    }, [changeTodolistTitleCallBack, todolist.id])\r\n\r\n    const onClickHandler = useCallback((value: FilterValuesType) => {\r\n        changeFilterCallBack(value, todolist.id)\r\n    }, [changeFilterCallBack, todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (todolist.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(task => task.status === TaskStatuses.New);\r\n    }\r\n\r\n    if (todolist.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(task => task.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.todolist__title}>\r\n                <EditableSpan value={todolist.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist} disabled={todolist.entityStatus === \"loading\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n            <AddItemForm\r\n                label={'Name task'}\r\n                addItem={addTask}\r\n                disabled={todolist.entityStatus === \"loading\"}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(task => {\r\n                        return (\r\n                            <Task\r\n                                key={task.id}\r\n                                todolistId={todolist.id}\r\n                                task={task}\r\n                                removeTask={removeTask}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <div style={{paddingTop: \"10px\"}}>\r\n                <Button\r\n                    variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('all')}\r\n                    color={'success'}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={() => onClickHandler('active')}\r\n                        color={'primary'}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('completed')}\r\n                    color={'secondary'}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n//type\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilterCallBack: (value: FilterValuesType, todolistId: string) => void\r\n    addTaskCallBack: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolistCallBack: (id: string) => void\r\n    changeTodolistTitleCallBack: (id: string, newTitle: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n","import {AppRootStateType} from \"../App/store\";\r\n\r\nexport const getIsInitializedSelector = (state: AppRootStateType) => {\r\n    return state.app.isInitialized\r\n}\r\n\r\nexport const getIsLoggedInSelector = (state: AppRootStateType) => {\r\n    return state.auth.isLoggedIn\r\n}\r\n\r\nexport const getTaskSelector = (state: AppRootStateType) => {\r\n    return state.tasks\r\n}\r\n\r\nexport const getTodoLists = (state: AppRootStateType) => {\r\n    return state.todolists\r\n}","import {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC, ChangeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType, removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolistsReducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolistApi\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {PATH} from \"../../utils/RouterPATH\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {getIsLoggedInSelector, getTaskSelector, getTodoLists} from \"../../utils/appSelectors\";\r\n\r\nexport const TodolistList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(getTodoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(getTaskSelector)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(getIsLoggedInSelector)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [demo, isLoggedIn, dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(id, todolistId));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title: newTitle}));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value));\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id));\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(ChangeTodolistTitleTC(id, title));\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}} justifyContent={'center'}>\r\n                <AddItemForm label={'Name todolist'} addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3} justifyContent={'center'}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        todolist={tl}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilterCallBack={changeFilter}\r\n                                        addTaskCallBack={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        removeTodolistCallBack={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitleCallBack={changeTodolistTitle}\r\n                                        demo={demo}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>)\r\n}\r\n\r\n//Types\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\n","import * as React from 'react';\r\nimport {AlertProps, Snackbar} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/core/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {AppAction} from \"../../App/AppReducer\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const error = useSelector<AppRootStateType, Nullable<string>>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(AppAction.setAppErrorAC(null))\r\n    }\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {LoginParamsType} from \"../../api/todolistApi\";\r\nimport {PATH} from \"../../utils/RouterPATH\";\r\nimport {getIsLoggedInSelector} from \"../../utils/appSelectors\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(getIsLoggedInSelector)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, \"captcha\">> = {}\r\n            if (!values.email) {\r\n                errors.email = 'Email is required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password is too short'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={PATH.MAIN_WINDOW}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a\r\n                                href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}\r\n                                rel=\"noreferrer\"\r\n                            >\r\n                                here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                            <TextField\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"password\")}\r\n\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={\r\n                                    <Checkbox\r\n                                        {...formik.getFieldProps(\"rememberMe\")}\r\n                                    />}\r\n                            />\r\n                            <Button\r\n                                type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport style from './PageNotFound.module.css'\r\n\r\nexport const PageNotFound = () => {\r\n    return (\r\n        <h1 className={style.pageNotFound}>404. Page not found</h1>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport style from './App.module.css';\r\n\r\nimport {CircularProgress, Container} from '@material-ui/core';\r\n\r\nimport {ButtonAppBar} from \"../components/ButtonAppBar/ButtonAppBar\";\r\nimport {TodolistList} from \"../features/TodolistList/TodolistList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC} from \"./AppReducer\";\r\nimport {PATH} from \"../utils/RouterPATH\";\r\nimport {PageNotFound} from \"../components/PageNotFound/PageNotFound\";\r\nimport {getIsInitializedSelector} from \"../utils/appSelectors\";\r\n\r\nexport const App: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(getIsInitializedSelector)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch, isInitialized])\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div className={style.preloader}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={PATH.MAIN_WINDOW} element={<TodolistList demo={demo}/>}/>\r\n                    <Route path={PATH.LOGIN} element={<Login/>}/>\r\n\r\n                    <Route path={PATH.PAGE_NOT_FOUND} element={<PageNotFound/>}/>\r\n                    <Route path={PATH.ERROR} element={<Navigate to={PATH.PAGE_NOT_FOUND}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n//type\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\n","import {tasksReducer} from '../features/TodolistList/tasksReducer';\r\nimport {todolistsReducer} from '../features/TodolistList/todolistsReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./AppReducer\";\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type InferActionTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App/App';\r\nimport {store} from './App/store';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerTask\":\"Task_containerTask__3GgPa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"App_preloader__1XTFU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist__title\":\"TodolistList_todolist__title__1P_46\"};"],"sourceRoot":""}