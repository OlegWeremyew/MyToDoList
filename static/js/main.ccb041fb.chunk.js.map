{"version":3,"sources":["components/EditableSpan/EditableSpan.module.scss","components/PageNotFound/PageNotFound.module.scss","api/todolistApi.ts","App/AppReducer.ts","features/Login/authReducer.ts","utils/errorUtils.ts","features/TodolistList/todolistsReducer.ts","components/ButtonAppBar/ButtonAppBar.tsx","features/TodolistList/tasksReducer.ts","utils/RouterPATH.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistList/Todolist/Task/Task.tsx","features/TodolistList/Todolist/Todolist.tsx","utils/appSelectors.ts","features/TodolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/PageNotFound/PageNotFound.tsx","App/App.tsx","App/store.ts","index.tsx","features/TodolistList/TodolistList.module.scss","features/TodolistList/Todolist/Task/Task.module.css","App/App.module.scss","features/TodolistList/Todolist/TodolistList.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","get","title","post","todolistId","put","delete","taskId","model","authAPI","data","appEnumReducer","initialState","status","error","isInitialized","authEnumReducer","AppAction","type","SET_ERROR","payload","SET_STATUS","SET_INITIALIZED","handleServerAppError","dispatch","messages","length","handleServerNetworkError","err","message","isLoggedIn","todolistEnumReducer","authAction","setIsLoggedInAC","value","SET_IS_LOGGED_IN","ButtonAppBar","useDispatch","useSelector","state","app","auth","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","color","mr","Typography","variant","component","Button","onClick","then","res","resultCode","catch","LinearProgress","taskEnumReducer","ActionTodolist","REMOVE_TODOLIST","id","todolist","ADD_TODOLIST","CHANGE_TODOLIST_TITLE","filter","CHANGE_TODOLIST_FILTER","todos","SET_TODOS","CHANGE_TODOLIST_ENTITY_STATUS","PATH","taskAction","REMOVE_TASK","task","ADD_TASK","UPDATE_TASK","tasks","SET_TASKS","updateTaskTC","domainModel","getState","find","t","apiModel","startDate","priority","description","deadline","AddItemForm","React","memo","addItem","label","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","key","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","className","style","text","Task","removeTask","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","classes","containerTask","mainBlock","Checkbox","Delete","fontSize","Todolist","demo","addTaskCallBack","removeTodolistCallBack","changeTodolistTitleCallBack","changeFilterCallBack","props","useEffect","items","addTask","removeTodolist","changeTodolistTitle","tasksForTodolist","todolist__title","entityStatus","map","paddingTop","getIsInitializedSelector","getIsLoggedInSelector","getTaskSelector","getTodoLists","todolists","TodolistList","todoLists","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeFilter","ChangeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","gridForm","spacing","gridTodolist","tl","Paper","paperStyle","to","LOGIN","Alert","ref","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","MAIN_WINDOW","justifyContent","FormControl","FormLabel","href","target","rel","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","PageNotFound","pageNotFound","App","finally","Container","fixed","path","element","PAGE_NOT_FOUND","ERROR","preloader","CircularProgress","rootReducer","combineReducers","action","f","todoListId","m","copyState","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,KAAO,6B,oBCAzBD,EAAOC,QAAU,CAAC,aAAe,qC,kECyFrBC,EAOAC,E,2FA9FNC,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,+CACTC,QAAS,CACL,UAAW,0CAINC,EAAc,WAInB,OAAON,EAASO,IAAT,gBAJFD,EAAc,SAOZE,GACP,OAAOR,EAASS,KAAT,cAAmE,CAACD,WARtEF,EAAc,SAWPI,EAAoBF,GAChC,OAAOR,EAASW,IAAT,qBAAyCD,GAAc,CAACF,WAZ1DF,EAAc,SAeZI,GACP,OAAOV,EAASY,OAAT,qBAA4CF,KAhB9CJ,EAAc,SAoBdI,GACL,OAAOV,EAASO,IAAT,qBAA6CG,EAA7C,aArBFJ,EAAc,SAwBZI,EAAoBG,GAC3B,OAAOb,EAASY,OAAT,qBAA4CF,EAA5C,kBAAgEG,KAzBlEP,EAAc,SA4BZI,EAAoBF,GAC3B,OAAOR,EAASS,KAAT,qBAAiGC,EAAjG,WAAuH,CAACF,WA7B1HF,EAAc,SAgCZI,EAAoBG,EAAgBC,GAC3C,OAAOd,EAASW,IAAT,qBAAkGD,EAAlG,kBAAsHG,GAAWC,IAInIC,EAAU,SACbC,GACF,OAAOhB,EAASS,KAAuE,cAAeO,IAFjGD,EAAU,WAKf,OAAOf,EAASO,IAA4C,aALvDQ,EAAU,WAQf,OAAOf,EAASY,OAAqB,iB,SAkCjCd,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KC3FL,IAMKkB,EANCC,EAAe,CACxBC,OAAQ,OACRC,MAAO,KACPC,eAAe,I,SAGPJ,K,6CAAAA,E,2CAAAA,E,wDAAAA,M,KAML,ICRKK,EDsBCC,EAAY,SACPH,GACV,MAAO,CACHI,KAAMP,EAAeQ,UACrBC,QAAS,CACLN,WALHG,EAAY,SASNJ,GACX,MAAO,CACHK,KAAMP,EAAeU,WACrBD,QAAS,CACLP,YAbHI,EAAY,SAiBJF,GACb,MAAO,CACHG,KAAMP,EAAeW,gBACrBF,QAAS,CACLL,mBEjDHQ,EAAuB,SAAIb,EAAuBc,GACvDd,EAAKe,SAASC,OACdF,EAASP,EAAwBP,EAAKe,SAAS,KAE/CD,EAASP,EAAwB,eAErCO,EAASP,EAAyB,YAGzBU,EAA2B,SAACC,EAA0BJ,GAC/DA,EAASP,EAAwBW,EAAIC,QAAUD,EAAIC,QAAU,eAC7DL,EAASP,EAAyB,YDThCL,EAAe,CACjBkB,YAAY,I,SAGJd,K,2DAAAA,M,KAIL,IEPKe,EFgBCC,EAAa,CACtBC,gBADsB,SACNC,GACZ,MAAO,CACHhB,KAAMF,EAAgBmB,iBACtBf,QAAS,CAACc,Y,sEGnBTE,EAAe,WAExB,IAAMZ,EAAWa,cAEXxB,EAASyB,aAAiD,SAAAC,GAAK,OAAIA,EAAMC,IAAI3B,UAC7EiB,EAAaQ,aAAuC,SAAAC,GAAK,OAAIA,EAAME,KAAKX,cAM9E,OACI,cAACY,EAAA,EAAD,CAAKC,GAAI,CAACC,SAAU,GAApB,SACI,eAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIC,KAAK,QACLC,KAAK,QACLC,MAAM,UACN,aAAW,OACXR,GAAI,CAACS,GAAI,KAGb,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAMZ,GAAI,CAACC,SAAU,GAAxD,sBAIId,GACG,cAAC0B,EAAA,EAAD,CAAQF,QAAQ,WAAWG,QArB5B,WAClBjC,GHkCsB,SAACA,GAC3Bf,IACKiD,MAAK,SAAAC,GAC0B,IAAxBA,EAAIjD,KAAKkD,YACTpC,EAASQ,EAAWC,iBAAgB,IACpCT,EAASP,EAAyB,eAElCM,EAAqBoC,EAAIjD,KAAMc,MAGtCqC,OAAM,SAACjC,GACJD,EAAyBC,EAAKJ,UGzBoC2B,MAAM,UAAzD,uBAII,YAAXtC,GACG,mCACC,cAACiD,EAAA,EAAD,Y,yBDrClBlD,EAA0C,I,SAEpCmB,K,4DAAAA,E,sDAAAA,E,wEAAAA,E,0EAAAA,E,wFAAAA,E,iDAAAA,M,KASL,IEHKgC,EFuCCC,EAAiB,SACT5D,GACb,MAAO,CACHc,KAAMa,EAAoBkC,gBAC1B7C,QAAS,CACL8C,GAAI9D,KALP4D,EAAiB,SASZG,GACV,MAAO,CACHjD,KAAMa,EAAoBqC,aAC1BhD,QAAS,CACL+C,cAbHH,GAAiB,SAiBJE,EAAYhE,GAC9B,MAAO,CACHgB,KAAMa,EAAoBsC,sBAC1BjD,QAAS,CACL8C,GAAIA,EACJhE,MAAOA,KAtBV8D,GAAiB,SA0BHE,EAAYI,GAC/B,MAAO,CACHpD,KAAMa,EAAoBwC,uBAC1BnD,QAAS,CACL8C,GAAIA,EACJI,OAAQA,KA/BXN,GAAiB,SAmCfQ,GACP,MAAO,CACHtD,KAAMa,EAAoB0C,UAC1BrD,QAAS,CACLoD,WAvCHR,GAAiB,SA2CGE,EAAYrD,GACrC,MAAO,CACHK,KAAMa,EAAoB2C,8BAC1BtD,QAAS,CACL8C,KACArD,Y,QEzFVD,GAA+B,I,SAEzBmD,K,gDAAAA,E,0CAAAA,E,gDAAAA,E,6CAAAA,M,KAOL,ICpBKY,GDqECC,GAAa,SACTrE,EAAgBH,GACzB,MAAO,CACHc,KAAM6C,EAAgBc,YACtBzD,QAAS,CACLb,OAAQA,EACRH,WAAYA,KANfwE,GAAa,SAUZE,GACN,MAAO,CACH5D,KAAM6C,EAAgBgB,SACtB3D,QAAS,CACL0D,UAdHF,GAAa,SAkBTrE,EAAgBC,EAAkCJ,GAC3D,MAAO,CACHc,KAAM6C,EAAgBiB,YACtB5D,QAAS,CACLZ,QACAJ,aACAG,YAxBHqE,GAAa,SA4BXK,EAAwB7E,GAC/B,MAAO,CACHc,KAAM6C,EAAgBmB,UACtB9D,QAAS,CACL6D,QACA7E,gBA2CH+E,GAAe,SAAC5E,EAAgBH,EAAoBgF,GAArC,OACxB,SAAC5D,EAA6B6D,GAE1B,IAEMP,EAFoBO,IAAWJ,MACa7E,GACbkF,MAAK,SAAAC,GACtC,OAAOA,EAAErB,KAAO3D,KAGpB,GAAIuE,EAAM,CACN,IAAMU,EAA6B,aAC/BtF,MAAO4E,EAAK5E,MACZuF,UAAWX,EAAKW,UAChBC,SAAUZ,EAAKY,SACfC,YAAab,EAAKa,YAClBC,SAAUd,EAAKc,SACf/E,OAAQiE,EAAKjE,QACVuE,GAEPpF,EAAuBI,EAAYG,EAAQiF,GACtC9B,MAAK,SAACC,GACyB,IAAxBA,EAAIjD,KAAKkD,WACTpC,EAASoD,GAAwBrE,EAAQ6E,EAAahF,IAEtDmB,EAAqBoC,EAAIjD,KAAMc,MAGtCqC,OAAM,SAACjC,GACJD,EAAyBC,EAAKJ,S,6BExKrCqE,GAA6CC,IAAMC,MAAK,YAAyC,IAAvCC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,MAA6B,IAAtBC,gBAAsB,SAEzG,EAAwBC,mBAAS,IAAjC,oBAAKjG,EAAL,KAAYkG,EAAZ,KACA,EAAwBD,oBAAkB,GAA1C,oBAAKrF,EAAL,KAAYuF,EAAZ,KAEMC,EAAiB,WACE,KAAjBpG,EAAMqG,QACNP,EAAQ9F,GACRkG,EAAS,KAETC,GAAS,IAejB,OAAO,gCACH,cAACG,GAAA,EAAD,CACIN,SAAUA,EACV5C,QAAQ,WACRxC,MAAOA,EACPmC,KAAK,QACLf,MAAOhC,EACPuG,SAlBgB,SAACC,GACrBN,EAASM,EAAEC,cAAczE,QAkBrB0E,WAfkB,SAACF,GACvBL,GAAS,GACK,UAAVK,EAAEG,KACFP,KAaAL,MAAOnF,EAAQ,oBAAsBmF,IAEzC,cAACjD,EAAA,EAAD,CAAYG,MAAM,UAAUM,QAAS6C,EAAgBJ,SAAUA,EAA/D,SACI,cAACY,GAAA,EAAD,Y,kDCrCCC,GAA+CjB,IAAMC,MAAK,YAAwB,IAAtB7D,EAAqB,EAArBA,MAAOuE,EAAc,EAAdA,SAE5E,EAA8BN,oBAAS,GAAvC,oBAAKa,EAAL,KAAeC,EAAf,KACA,EAAwBd,mBAASjE,GAAjC,oBAAKhC,EAAL,KAAYkG,EAAZ,KAcA,OACIY,EAEQ,cAACR,GAAA,EAAD,CACIlD,QAAQ,WACRpB,MAAOhC,EACPuG,SAVI,SAACC,GACjBN,EAASM,EAAEC,cAAczE,QAUbgF,WAAS,EAACC,OAfD,WACrBF,GAAY,GACZR,EAASvG,MAgBD,sBACIkH,cAvBS,WACrBH,GAAY,GACZb,EAASlE,IAsBDmF,UAAWC,KAAMC,KAFjB,SAIKrF,O,wCC3BRsF,GAAgC1B,IAAMC,MAAK,YAMQ,IALHjB,EAKE,EALFA,KACA2C,EAIE,EAJFA,WACArH,EAGE,EAHFA,WACAsH,EAEE,EAFFA,iBACAC,EACE,EADFA,gBAGnDC,EAAiBC,uBAAY,WAC/BJ,EAAW3C,EAAKZ,GAAI9D,KACrB,CAAC0E,EAAKZ,GAAI9D,EAAYqH,IAEnBK,EAAkBD,uBAAY,SAACnB,GACjC,IAAIqB,EAAiBrB,EAAEC,cAAcqB,QACrCN,EAAiB5C,EAAKZ,GAAI6D,EAAiBvI,EAAayI,UAAYzI,EAAa0I,IAAK9H,KACvF,CAAC0E,EAAKZ,GAAI9D,EAAYsH,IAEnBS,EAAuBN,uBAAY,SAACO,GACtCT,EAAgB7C,EAAKZ,GAAIkE,EAAUhI,KACpC,CAAC0E,EAAKZ,GAAI9D,EAAYuH,IAEzB,OACI,qBAAmBN,UAAWvC,EAAKjE,SAAWrB,EAAayI,UAAY,UAAY,GAAnF,SACI,sBAAKZ,UAAWgB,KAAQC,cAAxB,UACI,sBAAKjB,UAAWgB,KAAQE,UAAxB,UACI,cAACC,GAAA,EAAD,CACIR,QAASlD,EAAKjE,SAAWrB,EAAayI,UACtC9E,MAAM,UACNsD,SAAUqB,IAEd,cAACf,GAAD,CAAc7E,MAAO4C,EAAK5E,MAAOuG,SAAU0B,OAE/C,cAACnF,EAAA,EAAD,CAAYS,QAASmE,EAAgB3E,KAAK,QAA1C,SACI,cAACwF,GAAA,EAAD,CAAQC,SAAS,kBAXnB5D,EAAKZ,O,yKCjBVyE,GAAgC7C,IAAMC,MAAK,YAWQ,IAAD,IAVF6C,YAUE,SATFlB,EASE,EATFA,iBACAmB,EAQE,EARFA,gBACA1E,EAOE,EAPFA,SACA2E,EAME,EANFA,uBACAC,EAKE,EALFA,4BACApB,EAIE,EAJFA,gBACAF,EAGE,EAHFA,WACAuB,EAEE,EAFFA,qBACGC,EACD,mBAErDzH,EAAWa,cAEjB6G,qBAAU,WLgFc,IAAC9I,EK/EjBwI,GAGJpH,GL4EqBpB,EK5EC+D,EAASD,GL4Ea,SAAC1C,GACjDA,EAASP,EAAyB,YAClCjB,EAAqBI,GAChBsD,MAAK,SAACC,GACH,IAAMsB,EAAQtB,EAAIjD,KAAKyI,MACvB3H,EAASoD,GAAsBK,EAAO7E,IACtCoB,EAASP,EAAyB,sBKjFvC,CAAC2H,EAAMpH,EAAU2C,EAASD,KAE7B,IAAMkF,EAAUvB,uBAAY,SAAC3H,GACzB2I,EAAgB3I,EAAOiE,EAASD,MACjC,CAAC2E,EAAiB1E,EAASD,KAExBmF,EAAiBxB,uBAAY,WAC/BiB,EAAuB3E,EAASD,MACjC,CAAC4E,EAAwB3E,EAASD,KAE/BoF,EAAsBzB,uBAAY,SAAC3H,GACrC6I,EAA4B5E,EAASD,GAAIhE,KAC1C,CAAC6I,EAA6B5E,EAASD,KAEpC0D,EAAiBC,uBAAY,SAAC3F,GAChC8G,EAAqB9G,EAAOiC,EAASD,MACtC,CAAC8E,EAAsB7E,EAASD,KAE/BqF,EAAmBN,EAAMhE,MAU7B,MARwB,WAApBd,EAASG,SACTiF,EAAmBA,EAAiBjF,QAAO,SAAAQ,GAAI,OAAIA,EAAKjE,SAAWrB,EAAa0I,QAG5D,cAApB/D,EAASG,SACTiF,EAAmBA,EAAiBjF,QAAO,SAAAQ,GAAI,OAAIA,EAAKjE,SAAWrB,EAAayI,cAIhF,gCACI,sBAAKZ,UAAWC,KAAMkC,gBAAtB,UACI,cAACzC,GAAD,CAAc7E,MAAOiC,EAASjE,MAAOuG,SAAU6C,IAC/C,cAACtG,EAAA,EAAD,CAAYS,QAAS4F,EAAgBnD,SAAoC,YAA1B/B,EAASsF,aAAxD,SACI,cAAChB,GAAA,EAAD,SAGR,cAAC5C,GAAD,CACII,MAAO,YACPD,QAASoD,EACTlD,SAAoC,YAA1B/B,EAASsF,eACvB,8BAEQF,EAAiBG,KAAI,SAAA5E,GACjB,OACI,cAAC0C,GAAD,CAEIpH,WAAY+D,EAASD,GACrBY,KAAMA,EACN2C,WAAYA,EACZC,iBAAkBA,EAClBC,gBAAiBA,GALZ7C,EAAKZ,SAW9B,sBAAKoD,MAAO,CAACqC,WAAY,QAAzB,UACI,cAACnG,EAAA,EAAD,CACIF,QAA6B,QAApBa,EAASG,OAAmB,WAAa,OAClDb,QAAS,kBAAMmE,EAAe,QAC9BzE,MAAO,UAHX,iBAOA,cAACK,EAAA,EAAD,CAAQF,QAA6B,WAApBa,EAASG,OAAsB,WAAa,OACrDb,QAAS,kBAAMmE,EAAe,WAC9BzE,MAAO,UAFf,oBAMA,cAACK,EAAA,EAAD,CACIF,QAA6B,cAApBa,EAASG,OAAyB,WAAa,OACxDb,QAAS,kBAAMmE,EAAe,cAC9BzE,MAAO,YAHX,iC,SJxGJwB,K,gBAAAA,E,cAAAA,E,qBAAAA,E,WAAAA,Q,KKEL,IAAMiF,GAA2B,SAACrH,GACrC,OAAOA,EAAMC,IAAIzB,eAGR8I,GAAwB,SAACtH,GAClC,OAAOA,EAAME,KAAKX,YAGTgI,GAAkB,SAACvH,GAC5B,OAAOA,EAAM0C,OAGJ8E,GAAe,SAACxH,GACzB,OAAOA,EAAMyH,W,oBCOJC,GAAoC,SAAC,GAAoB,IAAD,IAAlBrB,YAAkB,SAE3DpH,EAAWa,cAEX6H,EAAY5H,YAAyDyH,IACrE9E,EAAQ3C,YAA8CwH,IACtDhI,EAAaQ,YAAuCuH,IAE1DX,qBAAU,YACFN,GAAS9G,GAGbN,GT0E8B,SAACA,GACnCA,EAASP,EAAyB,YAClCjB,IACK0D,MAAK,SAAAC,GACFnC,EAASwC,GAA0BL,EAAIjD,OACvCc,EAASP,EAAyB,sBS9EvC,CAAC2H,EAAM9G,EAAYN,IAEtB,IAAMiG,EAAaI,uBAAY,SAAC3D,EAAY9D,GACxCoB,EPiFoB,SAACjB,EAAgBH,GAAjB,OAAwC,SAACoB,GACjEA,EAASP,EAAyB,YAClCjB,EAAuBI,EAAYG,GAC9BmD,MAAK,SAAAC,GACFnC,EAASoD,GAAwBrE,EAAQH,IACzCoB,EAASP,EAAyB,kBOtF7BkJ,CAAajG,EAAI9D,MAC3B,CAACoB,IAEE4H,EAAUvB,uBAAY,SAAC3H,EAAeE,GACxCoB,EPsFiB,SAACpB,EAAoBF,GAArB,OAAuC,SAACsB,GAC7DA,EAASP,EAAyB,YAClCjB,EAAuBI,EAAYF,GAC9BwD,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAIjD,KAAKkD,WAAkB,CAC3B,IAAIkB,EAAOnB,EAAIjD,KAAKA,KAAK0J,KACzB5I,EAASoD,GAAqBE,IAC9BtD,EAASP,EAAyB,mBAElCM,EAAqBoC,EAAIjD,KAAMc,MAGtCqC,OAAM,SAACjC,GACJD,EAAyBC,EAAKJ,OOnGzB6I,CAAUjK,EAAYF,MAChC,CAACsB,IAEE8I,EAAezC,uBAAY,SAAC3D,EAAYrD,EAAsBT,GAChEoB,EAAS2D,GAAajB,EAAI9D,EAAY,CAACS,cACxC,CAACW,IAEEmG,EAAkBE,uBAAY,SAAC3D,EAAYqG,EAAkBnK,GAC/DoB,EAAS2D,GAAajB,EAAI9D,EAAY,CAACF,MAAOqK,OAC/C,CAAC/I,IAEEgJ,EAAe3C,uBAAY,SAAC3F,EAAyB9B,GACvDoB,EAASwC,GAAsC5D,EAAY8B,MAC5D,CAACV,IAEE6H,EAAiBxB,uBAAY,SAAC3D,GT4DR,IAAC9D,ES3DzBoB,GT2DyBpB,ES3DC8D,ET2DsB,SAAC1C,GACrDA,EAASP,EAAyB,YAClCO,EAASwC,GAA4C5D,EAAY,YACjEJ,EAAuBI,GAClBsD,MAAK,SAAAC,GACFnC,EAASwC,EAAgC5D,IACzCoB,EAASP,EAAyB,sBShEvC,CAACO,IAEE8H,EAAsBzB,uBAAY,SAAC3D,EAAYhE,GACjDsB,ET0E6B,SAAC0C,EAAYhE,GAAb,OAA+B,SAACsB,GACjEA,EAASP,EAAyB,YAClCjB,EAA4BkE,EAAIhE,GAC3BwD,MAAK,SAAAC,GACFnC,EAASwC,GAAqCE,EAAIhE,IAClDsB,EAASP,EAAyB,kBS/E7BwJ,CAAsBvG,EAAIhE,MACpC,CAACsB,IAEEkJ,EAAc7C,uBAAY,SAAC3H,GAC7BsB,ET6DqB,SAACtB,GAAD,OAAmB,SAACsB,GAC7CA,EAASP,EAAyB,YAClCjB,EAAuBE,GAClBwD,MAAK,SAAAC,GACFnC,EAASwC,EAA6BL,EAAIjD,KAAKA,KAAK0J,OACpD5I,EAASP,EAAyB,kBSlE7B0J,CAAczK,MACxB,CAACsB,IAEJ,OAAKM,EAKD,qCACI,cAAC8I,GAAA,EAAD,CAAMC,WAAS,EAACxD,UAAWC,IAAMwD,SAAjC,SACI,cAACjF,GAAD,CAAaI,MAAO,gBAAiBD,QAAS0E,MAElD,cAACE,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAG1D,UAAWC,IAAM0D,aAA7C,SAEQd,EAAUR,KAAI,SAAAuB,GACV,OACI,cAACL,GAAA,EAAD,CAAMR,MAAI,EAAV,SACI,cAACc,GAAA,EAAD,CAAO7D,UAAWC,IAAM6D,WAAxB,SACI,cAACxC,GAAD,CACIxE,SAAU8G,EACVhG,MAAOA,EAAMgG,EAAG/G,IAChBuD,WAAYA,EACZuB,qBAAsBwB,EACtB3B,gBAAiBO,EACjB1B,iBAAkB4C,EAClBxB,uBAAwBO,EACxB1B,gBAAiBA,EACjBoB,4BAA6BO,EAC7BV,KAAMA,OAZFqC,EAAG/G,YAZhC,cAAC,IAAD,CAAUkH,GAAIzG,GAAK0G,S,oBC5D5BC,GAAQxF,cAA6C,SACvDmD,EACAsC,GAEA,OAAO,cAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAKjI,QAAQ,UAAa2F,OAG3D,SAASwC,KAEZ,IAAMjK,EAAWa,cAEXvB,EAAQwB,aAAgD,SAAAC,GAAK,OAAIA,EAAMC,IAAI1B,SAE3E4K,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJpK,EAASP,EAAwB,QAG/B4K,EAAmB,OAAV/K,EAEf,OACI,cAACgL,GAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,EAAzD,SACI,cAAC,GAAD,CAAOO,QAASP,EAAaQ,SAAS,QAAQvJ,GAAI,CAACwJ,MAAO,QAA1D,SACKrL,M,sDCfJsL,GAAkB,WAE3B,IAAMtK,EAAaQ,YAAuCuH,IACpDrI,EAAWa,cAEXgK,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAAoD,GAW1D,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,oBAIdI,EAAOH,SAEDG,EAAOH,SAAS/K,OAAS,IAChCmL,EAAOJ,SAAW,yBAFlBI,EAAOJ,SAAW,uBAIfI,GAEXE,SAAU,SAAAH,GbXK,IAAClM,EaYZc,GbZYd,EaYKkM,EbZqB,SAACpL,GAC/CA,EAASP,EAAyB,YAClCR,EAAcC,GACTgD,MAAK,SAAAC,GAC0B,IAAxBA,EAAIjD,KAAKkD,YACTpC,EAASQ,EAAWC,iBAAgB,IACpCT,EAASP,EAAyB,eAElCM,EAAqBoC,EAAIjD,KAAMc,MAGtCqC,OAAM,SAACjC,GACJD,EAAyBC,EAAKJ,SaC9B6K,EAAOW,eAIf,OAAIlL,EACO,cAAC,IAAD,CAAUsJ,GAAIzG,GAAKsI,cAI1B,cAACrC,GAAA,EAAD,CAAMC,WAAS,EAACqC,eAAgB,SAAhC,SACI,cAACtC,GAAA,EAAD,CAAMR,MAAI,EAAC8C,eAAgB,SAA3B,SACI,eAACC,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,WACI,yDACI,mBACIC,KAAM,wCACNC,OAAQ,SACRC,IAAI,aAHR,qBAQJ,wEACA,0DACA,kDAEJ,sBAAMR,SAAUV,EAAOmB,aAAvB,SACI,eAACC,GAAA,EAAD,WACI,cAACjH,GAAA,EAAD,aACIP,MAAM,QACNyH,OAAO,UACHrB,EAAOsB,cAAc,WAE5BtB,EAAOuB,QAAQpB,OAASH,EAAOQ,OAAOL,OACvC,qBAAKlF,MAAO,CAACnE,MAAO,OAApB,SAA6BkJ,EAAOQ,OAAOL,QAC3C,cAAChG,GAAA,EAAD,aACIP,MAAM,WACN/E,KAAK,WACLwM,OAAO,UACHrB,EAAOsB,cAAc,cAG5BtB,EAAOuB,QAAQnB,UAAYJ,EAAOQ,OAAOJ,UAC1C,qBAAKnF,MAAO,CAACnE,MAAO,OAApB,SAA6BkJ,EAAOQ,OAAOJ,WAC3C,cAACoB,GAAA,EAAD,CACI5H,MAAO,cACP6H,QACI,cAACtF,GAAA,EAAD,eACQ6D,EAAOsB,cAAc,kBAGrC,cAACnK,EAAA,EAAD,CACItC,KAAM,SACNoC,QAAS,YACTH,MAAO,UAHX,gC,qBC/Ff4K,GAAe,WACxB,OACI,oBAAI1G,UAAWC,KAAM0G,aAArB,kC,oBCaKC,GAA2B,SAAC,GAAoB,IAAD,IAAlBrF,YAAkB,SAElDpH,EAAWa,cAEXtB,EAAgBuB,YAAuCsH,IAM7D,OAJAV,qBAAU,WACN1H,GhBsC6B,SAACA,GAClCf,IACKiD,MAAK,SAAAC,GAC0B,IAAxBA,EAAIjD,KAAKkD,YACTpC,EAASQ,EAAWC,iBAAgB,OAK3CiM,SAAQ,WACL1M,EAASP,GAA2B,YgB/CzC,CAACO,EAAUT,IAETA,EASD,gCACI,cAAC0K,GAAD,IACA,cAAC,EAAD,IACA,cAAC0C,GAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAM1J,GAAKsI,YAAaqB,QAAS,cAAC,GAAD,CAAc1F,KAAMA,MAC5D,cAAC,IAAD,CAAOyF,KAAM1J,GAAK0G,MAAOiD,QAAS,cAAC,GAAD,MAElC,cAAC,IAAD,CAAOD,KAAM1J,GAAK4J,eAAgBD,QAAS,cAAC,GAAD,MAC3C,cAAC,IAAD,CAAOD,KAAM1J,GAAK6J,MAAOF,QAAS,cAAC,IAAD,CAAUlD,GAAIzG,GAAK4J,2BAhB7D,qBAAKlH,UAAWC,IAAMmH,UAAtB,SACI,cAACC,GAAA,EAAD,O,mBCtBVC,GAAcC,aAAgB,CAChC3J,MZUwB,WAAuF,IAAtF1C,EAAqF,uDAA7D3B,GAAciO,EAA+C,uCAC9G,OAAQA,EAAO3N,MACX,KAAK6C,EAAgBc,YACjB,OAAO,2BACAtC,GADP,mBAEKsM,EAAOzN,QAAQhB,WAAamC,EAAMsM,EAAOzN,QAAQhB,YAC7CkE,QAAO,SAAAwK,GAAC,OAAIA,EAAE5K,KAAO2K,EAAOzN,QAAQb,YAGjD,KAAKwD,EAAgBgB,SACjB,OAAO,2BACAxC,GADP,mBAEKsM,EAAOzN,QAAQ0D,KAAKiK,WAFzB,CAEuCF,EAAOzN,QAAQ0D,MAFtD,mBAE+DvC,EAAMsM,EAAOzN,QAAQ0D,KAAKiK,gBAG7F,KAAKhL,EAAgBiB,YACjB,OAAO,2BACAzC,GADP,mBAEKsM,EAAOzN,QAAQhB,WAAamC,EAAMsM,EAAOzN,QAAQhB,YAC7CsJ,KAAI,SAAAsF,GAAC,OAAIA,EAAE9K,KAAO2K,EAAOzN,QAAQb,OAAxB,2BACAyO,GAAMH,EAAOzN,QAAQZ,OACzBwO,OAGlB,KAAKjN,EAAoBqC,aACrB,OAAO,2BACA7B,GADP,mBAEKsM,EAAOzN,QAAQ+C,SAASD,GAAK,KAGtC,KAAKnC,EAAoBkC,gBACrB,IAAMgL,EAAS,eAAO1M,GAEtB,cADO0M,EAAUJ,EAAOzN,QAAQ8C,IACzB+K,EAEX,KAAKlN,EAAoB0C,UACrB,IAAIyK,EAAS,eAAO3M,GAGpB,OAFAsM,EAAOzN,QAAQoD,MACV2K,SAAQ,SAAAL,GAAC,OAAII,EAAUJ,EAAE5K,IAAM,MAC7BgL,EAEX,KAAKnL,EAAgBmB,UACjB,OAAO,2BAAI3C,GAAX,mBAAmBsM,EAAOzN,QAAQhB,WAAayO,EAAOzN,QAAQ6D,QAElE,QACI,OAAO1C,IYtDfyH,UdK4B,WAA8G,IAA7GzH,EAA4G,uDAAzE3B,EAAciO,EAA2D,uCACzI,OAAQA,EAAO3N,MACX,KAAKa,EAAoBkC,gBACrB,OAAO1B,EACF+B,QAAO,SAAA2G,GAAE,OAAIA,EAAG/G,KAAO2K,EAAOzN,QAAQ8C,MAE/C,KAAKnC,EAAoBqC,aACrB,MAAM,CAAN,2BAAYyK,EAAOzN,QAAQ+C,UAA3B,IAAqCG,OAAQ,MAAOmF,aAAc,UAAlE,mBAA8ElH,IAElF,KAAKR,EAAoBsC,sBACrB,OAAO9B,EACFmH,KAAI,SAAAsF,GAAC,OAAIA,EAAE9K,KAAO2K,EAAOzN,QAAQ8C,GAAxB,2BACA8K,GADA,IACG9O,MAAO2O,EAAOzN,QAAQlB,QAC7B8O,KAEd,KAAKjN,EAAoBwC,uBACrB,OAAOhC,EACFmH,KAAI,SAAAsF,GAAC,OAAIA,EAAE9K,KAAO2K,EAAOzN,QAAQ8C,GAAxB,2BACA8K,GADA,IACG1K,OAAQuK,EAAOzN,QAAQkD,SAC9B0K,KAEd,KAAKjN,EAAoB2C,8BACrB,OAAOnC,EACFmH,KAAI,SAAAsF,GAAC,OAAIA,EAAE9K,KAAO2K,EAAOzN,QAAQ8C,GAAxB,2BACA8K,GADA,IACGvF,aAAcoF,EAAOzN,QAAQP,SACpCmO,KAEd,KAAKjN,EAAoB0C,UACrB,OAAOoK,EAAOzN,QAAQoD,MACjBkF,KAAI,SAAAsF,GAAC,kCAASA,GAAT,IAAY1K,OAAQ,MAAOmF,aAAc,YAEvD,QACI,OAAOlH,IcpCfC,IjBMsB,WAAuF,IAAtFD,EAAqF,uDAA3D3B,EAAciO,EAA6C,uCAC5G,OAAQA,EAAO3N,MACX,KAAKP,EAAeU,WAChB,OAAO,2BAAIkB,GAAX,IAAkB1B,OAAQgO,EAAOzN,QAAQP,SAC7C,KAAKF,EAAeQ,UAChB,OAAO,2BAAIoB,GAAX,IAAkBzB,MAAO+N,EAAOzN,QAAQN,QAC5C,KAAKH,EAAeW,gBAChB,OAAO,2BAAIiB,GAAX,IAAkBxB,cAAe8N,EAAOzN,QAAQL,gBACpD,QACI,OAAOwB,IiBdfE,KhBCuB,WAAoF,IAAnFF,EAAkF,uDAAxD3B,EAAciO,EAA0C,uCAC1G,OAAQA,EAAO3N,OACNF,EAAgBmB,iBACV,2BAAII,GAAX,IAAkBT,WAAY+M,EAAOzN,QAAQc,QAEtCK,KgBHN6M,GAAQC,aAAYV,GAAaW,aAAgBC,OAO9DC,OAAOJ,MAAQA,G,aCffK,IAASC,OACL,cAAC,KAAD,UACI,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACI,cAAC,GAAD,QAEOO,SAASC,eAAe,U,mBCZ3CtQ,EAAOC,QAAU,CAAC,SAAW,+BAA+B,aAAe,mCAAmC,WAAa,mC,mBCA3HD,EAAOC,QAAU,CAAC,cAAgB,8B,mBCAlCD,EAAOC,QAAU,CAAC,UAAY,yB,mBCA9BD,EAAOC,QAAU,CAAC,gBAAkB,yC","file":"static/js/main.ccb041fb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"EditableSpan_text__1HoEv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"PageNotFound_pageNotFound__hpQqE\"};","import axios, {AxiosResponse} from \"axios\";\r\nimport {Nullable} from \"../types/Nullable\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    headers: {\r\n        'API-KEY': 'f5a121b3-d5d2-4866-a73a-ab1418f0e4d8',\r\n    },\r\n})\r\n\r\nexport const todolistAPI = {\r\n\r\n    // todolist =============================\r\n    getTodos(): Promise<AxiosResponse<TodolistType[]>> {\r\n        return instance.get<TodolistType[]>(`todo-lists/`)\r\n    },\r\n\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists/`, {title})\r\n    },\r\n\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    // tasks =============================\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks/`)\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/`), {title})\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>((`todo-lists/${todolistId}/tasks/${taskId}`), model)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(\"/auth/login\", data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ data: ResponseMeType }>>(\"/auth/me\")\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(\"/auth/login\")\r\n    },\r\n}\r\n\r\n\r\n// types ====================================\r\n\r\ntype ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    error: Nullable<string>\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolistApi\";\r\nimport {Nullable} from \"../types/Nullable\";\r\nimport {InferActionTypes} from \"./store\";\r\nimport {authAction} from \"../features/Login/authReducer\";\r\n\r\nexport const initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null,\r\n    isInitialized: false,\r\n}\r\n\r\nexport enum appEnumReducer {\r\n    SET_STATUS = 'TODOLIST/APP_REDUCER/SET-STATUS',\r\n    SET_ERROR = 'TODOLIST/APP_REDUCER/SET_ERROR',\r\n    SET_INITIALIZED = 'TODOLIST/APP_REDUCER/SET_INITIALIZED',\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionAppTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case appEnumReducer.SET_STATUS:\r\n            return {...state, status: action.payload.status}\r\n        case appEnumReducer.SET_ERROR:\r\n            return {...state, error: action.payload.error}\r\n        case appEnumReducer.SET_INITIALIZED:\r\n            return {...state, isInitialized: action.payload.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ActionCreators=============================\r\nexport const AppAction = {\r\n    setAppErrorAC(error: Nullable<string>) {\r\n        return {\r\n            type: appEnumReducer.SET_ERROR,\r\n            payload: {\r\n                error,\r\n            },\r\n        } as const\r\n    },\r\n    setAppStatusAC(status: RequestStatusType) {\r\n        return {\r\n            type: appEnumReducer.SET_STATUS,\r\n            payload: {\r\n                status,\r\n            },\r\n        } as const\r\n    },\r\n    setInitializedAC(isInitialized: boolean){\r\n        return {\r\n            type: appEnumReducer.SET_INITIALIZED,\r\n            payload: {\r\n                isInitialized,\r\n            },\r\n        } as const\r\n    },\r\n}\r\n\r\n\r\n\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(authAction.setIsLoggedInAC(true));\r\n            } else {\r\n\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(AppAction.setInitializedAC(true))\r\n        })\r\n}\r\n\r\n//Types ========================================================\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: Nullable<string>,\r\n    isInitialized: boolean,\r\n}\r\n\r\nexport type ActionAppTypes = InferActionTypes<typeof AppAction>","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolistApi\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {ActionAppTypes, AppAction} from \"../../App/AppReducer\";\r\nimport {InferActionTypes} from \"../../App/store\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n}\r\n\r\nexport enum authEnumReducer {\r\n    SET_IS_LOGGED_IN = 'TODOLIST/AUTH_REDUCER/SET_IS_LOGGED_IN',\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case authEnumReducer.SET_IS_LOGGED_IN:\r\n            return {...state, isLoggedIn: action.payload.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const authAction = {\r\n    setIsLoggedInAC(value: boolean) {\r\n        return {\r\n            type: authEnumReducer.SET_IS_LOGGED_IN,\r\n            payload: {value},\r\n        } as const\r\n    }\r\n\r\n}\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(AppAction.setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(authAction.setIsLoggedInAC(true))\r\n                dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(authAction.setIsLoggedInAC(false))\r\n                dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionsType = ActionAuthTypes | ActionAppTypes\r\n\r\nexport type ActionAuthTypes = InferActionTypes<typeof authAction>\r\n","import {ActionAppTypes, AppAction} from \"../App/AppReducer\";\r\nimport {ResponseType} from \"../api/todolistApi\";\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<ActionAppTypes>) => {\r\n    if (data.messages.length) {\r\n        dispatch(AppAction.setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(AppAction.setAppErrorAC(\"Some error\"))\r\n    }\r\n    dispatch(AppAction.setAppStatusAC(\"failed\"))\r\n}\r\n\r\nexport const handleServerNetworkError = (err: { message: string }, dispatch: Dispatch<ActionAppTypes>) => {\r\n    dispatch(AppAction.setAppErrorAC(err.message ? err.message : \"Some error\"))\r\n    dispatch(AppAction.setAppStatusAC(\"failed\"))\r\n}","import {todolistAPI, TodolistType} from \"../../api/todolistApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionAppTypes, AppAction, RequestStatusType} from \"../../App/AppReducer\";\r\nimport {InferActionTypes} from \"../../App/store\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport enum todolistEnumReducer {\r\n    REMOVE_TODOLIST = 'TODOLIST/TODOLIST_REDUCER/REMOVE-TODOLIST',\r\n    ADD_TODOLIST = 'TODOLIST/TODOLIST_REDUCER/ADD_TODOLIST',\r\n    CHANGE_TODOLIST_TITLE = 'TODOLIST/TODOLIST_REDUCER/CHANGE-TODOLIST-TITLE',\r\n    CHANGE_TODOLIST_FILTER = 'TODOLIST/TODOLIST_REDUCER/CHANGE_TODOLIST_FILTER',\r\n    CHANGE_TODOLIST_ENTITY_STATUS = 'TODOLIST/TODOLIST_REDUCER/CHANGE_TODOLIST_ENTITY_STATUS',\r\n    SET_TODOS = 'TODOLIST/TODOLIST_REDUCER/SET_TODOS',\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionTodolistTypes): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case todolistEnumReducer.REMOVE_TODOLIST: {\r\n            return state\r\n                .filter(tl => tl.id !== action.payload.id)\r\n        }\r\n        case todolistEnumReducer.ADD_TODOLIST: {\r\n            return [{...action.payload.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        }\r\n        case todolistEnumReducer.CHANGE_TODOLIST_TITLE: {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, title: action.payload.title}\r\n                    : m)\r\n        }\r\n        case todolistEnumReducer.CHANGE_TODOLIST_FILTER: {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, filter: action.payload.filter}\r\n                    : m)\r\n        }\r\n        case todolistEnumReducer.CHANGE_TODOLIST_ENTITY_STATUS: {\r\n            return state\r\n                .map(m => m.id === action.payload.id\r\n                    ? {...m, entityStatus: action.payload.status}\r\n                    : m)\r\n        }\r\n        case todolistEnumReducer.SET_TODOS: {\r\n            return action.payload.todos\r\n                .map(m => ({...m, filter: \"all\", entityStatus: \"idle\"}))\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const ActionTodolist = {\r\n    removeTodolistAC(todolistId: string) {\r\n        return {\r\n            type: todolistEnumReducer.REMOVE_TODOLIST,\r\n            payload: {\r\n                id: todolistId,\r\n            }\r\n        } as const\r\n    },\r\n    addTodolistAC(todolist: TodolistType) {\r\n        return {\r\n            type: todolistEnumReducer.ADD_TODOLIST,\r\n            payload: {\r\n                todolist,\r\n            }\r\n        } as const\r\n    },\r\n    changeTodolistTitleAC(id: string, title: string) {\r\n        return {\r\n            type: todolistEnumReducer.CHANGE_TODOLIST_TITLE,\r\n            payload: {\r\n                id: id,\r\n                title: title,\r\n            }\r\n        } as const\r\n    },\r\n    changeTodolistFilterAC(id: string, filter: FilterValuesType) {\r\n        return {\r\n            type: todolistEnumReducer.CHANGE_TODOLIST_FILTER,\r\n            payload: {\r\n                id: id,\r\n                filter: filter,\r\n            }\r\n        } as const\r\n    },\r\n    setTodosAC(todos: Array<TodolistType>) {\r\n        return {\r\n            type: todolistEnumReducer.SET_TODOS,\r\n            payload: {\r\n                todos,\r\n            },\r\n        } as const\r\n    },\r\n    changeTodolistEntityStatusAC(id: string, status: RequestStatusType) {\r\n        return {\r\n            type: todolistEnumReducer.CHANGE_TODOLIST_ENTITY_STATUS,\r\n            payload: {\r\n                id,\r\n                status,\r\n            },\r\n        } as const\r\n    }\r\n}\r\n\r\n\r\n// Thunk=============================================================\r\nexport const fetchTodolistsTC = () => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    todolistAPI.getTodos()\r\n        .then(res => {\r\n            dispatch(ActionTodolist.setTodosAC(res.data))\r\n            dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    dispatch(ActionTodolist.changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n    todolistAPI.deleteTodo(todolistId)\r\n        .then(res => {\r\n            dispatch(ActionTodolist.removeTodolistAC(todolistId))\r\n            dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    todolistAPI.createTodo(title)\r\n        .then(res => {\r\n            dispatch(ActionTodolist.addTodolistAC(res.data.data.item))\r\n            dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const ChangeTodolistTitleTC = (id: string, title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    todolistAPI.updateTodoTitle(id, title)\r\n        .then(res => {\r\n            dispatch(ActionTodolist.changeTodolistTitleAC(id, title))\r\n            dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\n//types\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type ThunkDispatchType = Dispatch<ActionTodolistTypes | ActionAppTypes>\r\n\r\nexport type ActionTodolistTypes = InferActionTypes<typeof ActionTodolist>","import * as React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {RequestStatusType} from \"../../App/AppReducer\";\r\nimport {logoutTC} from \"../../features/Login/authReducer\";\r\n\r\nimport {AppBar, Box, Button, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\n\r\nexport const ButtonAppBar = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        Todolist\r\n                    </Typography>\r\n                    {\r\n                        isLoggedIn\r\n                        && <Button variant=\"outlined\" onClick={logoutHandler} color=\"inherit\">Logout</Button>\r\n                    }\r\n                </Toolbar>\r\n                {\r\n                    status === \"loading\"\r\n                    && <>\r\n                        <LinearProgress/>\r\n                    </>\r\n                }\r\n            </AppBar>\r\n        </Box>\r\n    )\r\n}\r\n","import {\r\n    ActionTodolistTypes,\r\n    todolistEnumReducer\r\n} from './todolistsReducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../../api/todolistApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType, InferActionTypes} from \"../../App/store\";\r\nimport {TasksStateType} from \"./TodolistList\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {ActionAppTypes, AppAction} from \"../../App/AppReducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport enum taskEnumReducer {\r\n    REMOVE_TASK = 'TODOLIST/TASK_REDUCER/REMOVE_TASK',\r\n    ADD_TASK = 'TODOLIST/TASK_REDUCER/ADD_TASK',\r\n    UPDATE_TASK = 'TODOLIST/TASK_REDUCER/UPDATE_TASK',\r\n    SET_TASKS = 'TODOLIST/TASK_REDUCER/SET-TASKS',\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsTaskAllType): TasksStateType => {\r\n    switch (action.type) {\r\n        case taskEnumReducer.REMOVE_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .filter(f => f.id !== action.payload.taskId)\r\n            }\r\n        }\r\n        case taskEnumReducer.ADD_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]]\r\n            }\r\n        }\r\n        case taskEnumReducer.UPDATE_TASK: {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .map(m => m.id === action.payload.taskId\r\n                        ? {...m, ...action.payload.model}\r\n                        : m)\r\n            }\r\n        }\r\n        case todolistEnumReducer.ADD_TODOLIST: {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolist.id]: []\r\n            }\r\n        }\r\n        case todolistEnumReducer.REMOVE_TODOLIST: {\r\n            const copyState = {...state};\r\n            delete copyState[action.payload.id];\r\n            return copyState;\r\n        }\r\n        case todolistEnumReducer.SET_TODOS: {\r\n            let stateCopy = {...state}\r\n            action.payload.todos\r\n                .forEach(f => stateCopy[f.id] = [])\r\n            return stateCopy\r\n        }\r\n        case taskEnumReducer.SET_TASKS: {\r\n            return {...state, [action.payload.todolistId]: action.payload.tasks}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const taskAction = {\r\n    removeTaskAC(taskId: string, todolistId: string) {\r\n        return {\r\n            type: taskEnumReducer.REMOVE_TASK,\r\n            payload: {\r\n                taskId: taskId,\r\n                todolistId: todolistId,\r\n            }\r\n        } as const\r\n    },\r\n    addTaskAC(task: TaskType) {\r\n        return {\r\n            type: taskEnumReducer.ADD_TASK,\r\n            payload: {\r\n                task,\r\n            }\r\n        } as const\r\n    },\r\n    updateTaskAC(taskId: string, model: UpdateDomainTaskModelType, todolistId: string) {\r\n        return {\r\n            type: taskEnumReducer.UPDATE_TASK,\r\n            payload: {\r\n                model,\r\n                todolistId,\r\n                taskId,\r\n            }\r\n        } as const\r\n    },\r\n    setTasksAC(tasks: Array<TaskType>, todolistId: string) {\r\n        return {\r\n            type: taskEnumReducer.SET_TASKS,\r\n            payload: {\r\n                tasks,\r\n                todolistId,\r\n            }\r\n        } as const\r\n    },\r\n}\r\n\r\n//Thunk===================================================================================\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(taskAction.setTasksAC(tasks, todolistId))\r\n            dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(taskAction.removeTaskAC(taskId, todolistId))\r\n            dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: ThunkDispatchType) => {\r\n    dispatch(AppAction.setAppStatusAC(\"loading\"))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                let task = res.data.data.item\r\n                dispatch(taskAction.addTaskAC(task))\r\n                dispatch(AppAction.setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: ThunkDispatchType, getState: () => AppRootStateType) => {\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n                ...domainModel,\r\n            }\r\n            todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(taskAction.updateTaskAC(taskId, domainModel, todolistId))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    handleServerNetworkError(err, dispatch)\r\n                })\r\n        }\r\n    }\r\n\r\n//types===============================================\r\nexport type ThunkDispatchType = Dispatch<ActionsTaskAllType | ActionAppTypes>\r\n\r\ntype ActionsTaskAllType =\r\n    | ActionTaskTypes\r\n    | ActionTodolistTypes\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type ActionTaskTypes = InferActionTypes<typeof taskAction>\r\n","export enum PATH {\r\n    MAIN_WINDOW = '/',\r\n    LOGIN =\"login\",\r\n    PAGE_NOT_FOUND = '404',\r\n    ERROR = '*',\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport const AddItemForm:React.FC<AddItemFormPropsType> = React.memo(({addItem, label, disabled = false}) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField\r\n            disabled={disabled}\r\n            variant=\"standard\"\r\n            error={error}\r\n            size=\"small\"\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label={error ? \"Title is required\" : label}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\n//type\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    label: string\r\n    disabled?: boolean\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport style from './EditableSpan.module.scss'\r\n\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport const EditableSpan:React.FC<EditableSpanPropsType> = React.memo(({value, onChange}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(value)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? (\r\n                <TextField\r\n                    variant=\"standard\"\r\n                    value={title}\r\n                    onChange={changeTitle}\r\n                    autoFocus onBlur={activateViewMode}\r\n                />\r\n            ) : (\r\n                <span\r\n                    onDoubleClick={activateEditMode}\r\n                className={style.text}\r\n                >\r\n                    {value}\r\n                </span>\r\n            )\r\n    )\r\n})\r\n\r\n//type\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport classes from './Task.module.css'\r\n\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolistApi\";\r\n\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({\r\n                                                             task,\r\n                                                             removeTask,\r\n                                                             todolistId,\r\n                                                             changeTaskStatus,\r\n                                                             changeTaskTitle\r\n                                                         }) => {\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todolistId)\r\n    }, [task.id, todolistId, removeTask])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }, [task.id, todolistId, changeTaskStatus])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId)\r\n    }, [task.id, todolistId, changeTaskTitle])\r\n\r\n    return (\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <div className={classes.containerTask}>\r\n                <div className={classes.mainBlock}>\r\n                    <Checkbox\r\n                        checked={task.status === TaskStatuses.Completed}\r\n                        color=\"primary\"\r\n                        onChange={onChangeHandler}\r\n                    />\r\n                    <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n                </div>\r\n                <IconButton onClick={onClickHandler} size=\"small\">\r\n                    <Delete fontSize=\"inherit\"/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n//type\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskID: string, newValue: string, todolistID: string) => void\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport style from './TodolistList.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolistApi\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolistsReducer\";\r\nimport {fetchTasksTC} from \"../tasksReducer\";\r\n\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo(({\r\n                                                             demo = false,\r\n                                                             changeTaskStatus,\r\n                                                             addTaskCallBack,\r\n                                                             todolist,\r\n                                                             removeTodolistCallBack,\r\n                                                             changeTodolistTitleCallBack,\r\n                                                             changeTaskTitle,\r\n                                                             removeTask,\r\n                                                             changeFilterCallBack,\r\n                                                             ...props\r\n                                                         }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [demo, dispatch, todolist.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        addTaskCallBack(title, todolist.id)\r\n    }, [addTaskCallBack, todolist.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        removeTodolistCallBack(todolist.id)\r\n    }, [removeTodolistCallBack, todolist.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleCallBack(todolist.id, title)\r\n    }, [changeTodolistTitleCallBack, todolist.id])\r\n\r\n    const onClickHandler = useCallback((value: FilterValuesType) => {\r\n        changeFilterCallBack(value, todolist.id)\r\n    }, [changeFilterCallBack, todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (todolist.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(task => task.status === TaskStatuses.New);\r\n    }\r\n\r\n    if (todolist.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(task => task.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.todolist__title}>\r\n                <EditableSpan value={todolist.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist} disabled={todolist.entityStatus === \"loading\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n            <AddItemForm\r\n                label={'Name task'}\r\n                addItem={addTask}\r\n                disabled={todolist.entityStatus === \"loading\"}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(task => {\r\n                        return (\r\n                            <Task\r\n                                key={task.id}\r\n                                todolistId={todolist.id}\r\n                                task={task}\r\n                                removeTask={removeTask}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <div style={{paddingTop: \"10px\"}}>\r\n                <Button\r\n                    variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('all')}\r\n                    color={'success'}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                        onClick={() => onClickHandler('active')}\r\n                        color={'primary'}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={() => onClickHandler('completed')}\r\n                    color={'secondary'}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n//type\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilterCallBack: (value: FilterValuesType, todolistId: string) => void\r\n    addTaskCallBack: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolistCallBack: (id: string) => void\r\n    changeTodolistTitleCallBack: (id: string, newTitle: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n","import {AppRootStateType} from \"../App/store\";\r\n\r\nexport const getIsInitializedSelector = (state: AppRootStateType) => {\r\n    return state.app.isInitialized\r\n}\r\n\r\nexport const getIsLoggedInSelector = (state: AppRootStateType) => {\r\n    return state.auth.isLoggedIn\r\n}\r\n\r\nexport const getTaskSelector = (state: AppRootStateType) => {\r\n    return state.tasks\r\n}\r\n\r\nexport const getTodoLists = (state: AppRootStateType) => {\r\n    return state.todolists\r\n}","import React, {useCallback, useEffect} from \"react\";\r\nimport style from './TodolistList.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {\r\n    ActionTodolist,\r\n    addTodolistTC,\r\n    ChangeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType, removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolistsReducer\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolistApi\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {PATH} from \"../../utils/RouterPATH\";\r\nimport {getIsLoggedInSelector, getTaskSelector, getTodoLists} from \"../../utils/appSelectors\";\r\n\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\n\r\nexport const TodolistList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(getTodoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(getTaskSelector)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(getIsLoggedInSelector)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [demo, isLoggedIn, dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(id, todolistId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {status}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(id, todolistId, {title: newTitle}))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(ActionTodolist.changeTodolistFilterAC(todolistId, value))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(ChangeTodolistTitleTC(id, title))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container className={style.gridForm}>\r\n                <AddItemForm label={'Name todolist'} addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3} className={style.gridTodolist}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper className={style.paperStyle}>\r\n                                    <Todolist\r\n                                        todolist={tl}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilterCallBack={changeFilter}\r\n                                        addTaskCallBack={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        removeTodolistCallBack={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitleCallBack={changeTodolistTitle}\r\n                                        demo={demo}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\n//Types\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n","import * as React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {AppAction} from \"../../App/AppReducer\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\n\r\nimport {AlertProps, Snackbar} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/core/Alert';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const error = useSelector<AppRootStateType, Nullable<string>>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(AppAction.setAppErrorAC(null))\r\n    }\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {LoginParamsType} from \"../../api/todolistApi\";\r\nimport {PATH} from \"../../utils/RouterPATH\";\r\nimport {getIsLoggedInSelector} from \"../../utils/appSelectors\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(getIsLoggedInSelector)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, \"captcha\">> = {}\r\n            if (!values.email) {\r\n                errors.email = 'Email is required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password is too short'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={PATH.MAIN_WINDOW}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a\r\n                                href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}\r\n                                rel=\"noreferrer\"\r\n                            >\r\n                                here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                            <TextField\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"password\")}\r\n\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={\r\n                                    <Checkbox\r\n                                        {...formik.getFieldProps(\"rememberMe\")}\r\n                                    />}\r\n                            />\r\n                            <Button\r\n                                type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport style from './PageNotFound.module.scss'\r\n\r\nexport const PageNotFound = () => {\r\n    return (\r\n        <h1 className={style.pageNotFound}>\r\n            404. Page not found\r\n        </h1>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport style from './App.module.scss';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {ButtonAppBar} from \"../components/ButtonAppBar/ButtonAppBar\";\r\nimport {TodolistList} from \"../features/TodolistList/TodolistList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC} from \"./AppReducer\";\r\nimport {PATH} from \"../utils/RouterPATH\";\r\nimport {PageNotFound} from \"../components/PageNotFound/PageNotFound\";\r\nimport {getIsInitializedSelector} from \"../utils/appSelectors\";\r\n\r\nimport {CircularProgress, Container} from '@material-ui/core';\r\n\r\n\r\nexport const App: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(getIsInitializedSelector)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch, isInitialized])\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div className={style.preloader}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={PATH.MAIN_WINDOW} element={<TodolistList demo={demo}/>}/>\r\n                    <Route path={PATH.LOGIN} element={<Login/>}/>\r\n\r\n                    <Route path={PATH.PAGE_NOT_FOUND} element={<PageNotFound/>}/>\r\n                    <Route path={PATH.ERROR} element={<Navigate to={PATH.PAGE_NOT_FOUND}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n//type\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\n","import {tasksReducer} from '../features/TodolistList/tasksReducer';\r\nimport {todolistsReducer} from '../features/TodolistList/todolistsReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./AppReducer\";\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type InferActionTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport './index.scss';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App/App';\r\nimport {store} from './App/store';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'))\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridForm\":\"TodolistList_gridForm__OjAVx\",\"gridTodolist\":\"TodolistList_gridTodolist__2Lu6-\",\"paperStyle\":\"TodolistList_paperStyle__3jQwE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerTask\":\"Task_containerTask__3GgPa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"App_preloader__rdwnx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist__title\":\"TodolistList_todolist__title__1P_46\"};"],"sourceRoot":""}